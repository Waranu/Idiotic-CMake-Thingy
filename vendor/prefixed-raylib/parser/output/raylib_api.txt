
Defines found: 57

Define 001: RAYLIB_H
  Name: RAYLIB_H
  Type: GUARD
  Value: 
  Description: 
Define 002: RAYLIB_VERSION_MAJOR
  Name: RAYLIB_VERSION_MAJOR
  Type: INT
  Value: 5
  Description: 
Define 003: RAYLIB_VERSION_MINOR
  Name: RAYLIB_VERSION_MINOR
  Type: INT
  Value: 5
  Description: 
Define 004: RAYLIB_VERSION_PATCH
  Name: RAYLIB_VERSION_PATCH
  Type: INT
  Value: 0
  Description: 
Define 005: RAYLIB_VERSION
  Name: RAYLIB_VERSION
  Type: STRING
  Value: "5.5-dev"
  Description: 
Define 006: __declspec(x)
  Name: __declspec(x)
  Type: MACRO
  Value: __attribute__((x))
  Description: 
Define 007: RLAPI
  Name: RLAPI
  Type: UNKNOWN
  Value: __declspec(dllexport)
  Description: We are building the library as a Win32 shared library (.dll)
Define 008: PI
  Name: PI
  Type: FLOAT
  Value: 3.14159265358979323846
  Description: 
Define 009: DEG2RAD
  Name: DEG2RAD
  Type: FLOAT_MATH
  Value: (PI/180.0f)
  Description: 
Define 010: RAD2DEG
  Name: RAD2DEG
  Type: FLOAT_MATH
  Value: (180.0f/PI)
  Description: 
Define 011: RL_MALLOC(sz)
  Name: RL_MALLOC(sz)
  Type: MACRO
  Value: malloc(sz)
  Description: 
Define 012: RL_CALLOC(n,sz)
  Name: RL_CALLOC(n,sz)
  Type: MACRO
  Value: calloc(n,sz)
  Description: 
Define 013: RL_REALLOC(ptr,sz)
  Name: RL_REALLOC(ptr,sz)
  Type: MACRO
  Value: realloc(ptr,sz)
  Description: 
Define 014: RL_FREE(ptr)
  Name: RL_FREE(ptr)
  Type: MACRO
  Value: free(ptr)
  Description: 
Define 015: CLITERAL(type)
  Name: CLITERAL(type)
  Type: MACRO
  Value: type
  Description: 
Define 016: RL_COLOR_TYPE
  Name: RL_COLOR_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 017: RL_RECTANGLE_TYPE
  Name: RL_RECTANGLE_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 018: RL_VECTOR2_TYPE
  Name: RL_VECTOR2_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 019: RL_VECTOR3_TYPE
  Name: RL_VECTOR3_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 020: RL_VECTOR4_TYPE
  Name: RL_VECTOR4_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 021: RL_QUATERNION_TYPE
  Name: RL_QUATERNION_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 022: RL_MATRIX_TYPE
  Name: RL_MATRIX_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 023: RL_LIGHTGRAY
  Name: RL_LIGHTGRAY
  Type: COLOR
  Value: CLITERAL(RL_Color){ 200, 200, 200, 255 }
  Description: Light Gray
Define 024: RL_GRAY
  Name: RL_GRAY
  Type: COLOR
  Value: CLITERAL(RL_Color){ 130, 130, 130, 255 }
  Description: Gray
Define 025: RL_DARKGRAY
  Name: RL_DARKGRAY
  Type: COLOR
  Value: CLITERAL(RL_Color){ 80, 80, 80, 255 }
  Description: Dark Gray
Define 026: RL_YELLOW
  Name: RL_YELLOW
  Type: COLOR
  Value: CLITERAL(RL_Color){ 253, 249, 0, 255 }
  Description: Yellow
Define 027: RL_GOLD
  Name: RL_GOLD
  Type: COLOR
  Value: CLITERAL(RL_Color){ 255, 203, 0, 255 }
  Description: Gold
Define 028: RL_ORANGE
  Name: RL_ORANGE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 255, 161, 0, 255 }
  Description: Orange
Define 029: RL_PINK
  Name: RL_PINK
  Type: COLOR
  Value: CLITERAL(RL_Color){ 255, 109, 194, 255 }
  Description: Pink
Define 030: RL_RED
  Name: RL_RED
  Type: COLOR
  Value: CLITERAL(RL_Color){ 230, 41, 55, 255 }
  Description: Red
Define 031: RL_MAROON
  Name: RL_MAROON
  Type: COLOR
  Value: CLITERAL(RL_Color){ 190, 33, 55, 255 }
  Description: Maroon
Define 032: RL_GREEN
  Name: RL_GREEN
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 228, 48, 255 }
  Description: Green
Define 033: RL_LIME
  Name: RL_LIME
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 158, 47, 255 }
  Description: Lime
Define 034: RL_DARKGREEN
  Name: RL_DARKGREEN
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 117, 44, 255 }
  Description: Dark Green
Define 035: RL_SKYBLUE
  Name: RL_SKYBLUE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 102, 191, 255, 255 }
  Description: Sky Blue
Define 036: RL_BLUE
  Name: RL_BLUE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 121, 241, 255 }
  Description: Blue
Define 037: RL_DARKBLUE
  Name: RL_DARKBLUE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 82, 172, 255 }
  Description: Dark Blue
Define 038: RL_PURPLE
  Name: RL_PURPLE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 200, 122, 255, 255 }
  Description: Purple
Define 039: RL_VIOLET
  Name: RL_VIOLET
  Type: COLOR
  Value: CLITERAL(RL_Color){ 135, 60, 190, 255 }
  Description: Violet
Define 040: RL_DARKPURPLE
  Name: RL_DARKPURPLE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 112, 31, 126, 255 }
  Description: Dark Purple
Define 041: RL_BEIGE
  Name: RL_BEIGE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 211, 176, 131, 255 }
  Description: Beige
Define 042: RL_BROWN
  Name: RL_BROWN
  Type: COLOR
  Value: CLITERAL(RL_Color){ 127, 106, 79, 255 }
  Description: Brown
Define 043: RL_DARKBROWN
  Name: RL_DARKBROWN
  Type: COLOR
  Value: CLITERAL(RL_Color){ 76, 63, 47, 255 }
  Description: Dark Brown
Define 044: RL_WHITE
  Name: RL_WHITE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 255, 255, 255, 255 }
  Description: White
Define 045: RL_BLACK
  Name: RL_BLACK
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 0, 0, 255 }
  Description: Black
Define 046: RL_BLANK
  Name: RL_BLANK
  Type: COLOR
  Value: CLITERAL(RL_Color){ 0, 0, 0, 0 }
  Description: Blank (Transparent)
Define 047: RL_MAGENTA
  Name: RL_MAGENTA
  Type: COLOR
  Value: CLITERAL(RL_Color){ 255, 0, 255, 255 }
  Description: Magenta
Define 048: RL_RAYWHITE
  Name: RL_RAYWHITE
  Type: COLOR
  Value: CLITERAL(RL_Color){ 245, 245, 245, 255 }
  Description: My own White (raylib logo)
Define 049: RL_BOOL_TYPE
  Name: RL_BOOL_TYPE
  Type: GUARD
  Value: 
  Description: 
Define 050: MOUSE_LEFT_BUTTON
  Name: MOUSE_LEFT_BUTTON
  Type: UNKNOWN
  Value: MOUSE_BUTTON_LEFT
  Description: 
Define 051: MOUSE_RIGHT_BUTTON
  Name: MOUSE_RIGHT_BUTTON
  Type: UNKNOWN
  Value: MOUSE_BUTTON_RIGHT
  Description: 
Define 052: MOUSE_MIDDLE_BUTTON
  Name: MOUSE_MIDDLE_BUTTON
  Type: UNKNOWN
  Value: MOUSE_BUTTON_MIDDLE
  Description: 
Define 053: MATERIAL_MAP_DIFFUSE
  Name: MATERIAL_MAP_DIFFUSE
  Type: UNKNOWN
  Value: MATERIAL_MAP_ALBEDO
  Description: 
Define 054: MATERIAL_MAP_SPECULAR
  Name: MATERIAL_MAP_SPECULAR
  Type: UNKNOWN
  Value: MATERIAL_MAP_METALNESS
  Description: 
Define 055: SHADER_LOC_MAP_DIFFUSE
  Name: SHADER_LOC_MAP_DIFFUSE
  Type: UNKNOWN
  Value: SHADER_LOC_MAP_ALBEDO
  Description: 
Define 056: SHADER_LOC_MAP_SPECULAR
  Name: SHADER_LOC_MAP_SPECULAR
  Type: UNKNOWN
  Value: SHADER_LOC_MAP_METALNESS
  Description: 
Define 057: RL_GetMouseRay
  Name: RL_GetMouseRay
  Type: UNKNOWN
  Value: RL_GetScreenToWorldRay
  Description: Compatibility hack for previous raylib versions

Structures found: 34

Struct 01: RL_Vector2 (2 fields)
  Name: RL_Vector2
  Description: RL_Vector2, 2 components
  Field[1]: float x // Vector x component
  Field[2]: float y // Vector y component
Struct 02: RL_Vector3 (3 fields)
  Name: RL_Vector3
  Description: RL_Vector3, 3 components
  Field[1]: float x // Vector x component
  Field[2]: float y // Vector y component
  Field[3]: float z // Vector z component
Struct 03: RL_Vector4 (4 fields)
  Name: RL_Vector4
  Description: RL_Vector4, 4 components
  Field[1]: float x // Vector x component
  Field[2]: float y // Vector y component
  Field[3]: float z // Vector z component
  Field[4]: float w // Vector w component
Struct 04: RL_Matrix (16 fields)
  Name: RL_Matrix
  Description: RL_Matrix, 4x4 components, column major, OpenGL style, right-handed
  Field[1]: float m0 // RL_Matrix first row (4 components)
  Field[2]: float m4 // RL_Matrix first row (4 components)
  Field[3]: float m8 // RL_Matrix first row (4 components)
  Field[4]: float m12 // RL_Matrix first row (4 components)
  Field[5]: float m1 // RL_Matrix second row (4 components)
  Field[6]: float m5 // RL_Matrix second row (4 components)
  Field[7]: float m9 // RL_Matrix second row (4 components)
  Field[8]: float m13 // RL_Matrix second row (4 components)
  Field[9]: float m2 // RL_Matrix third row (4 components)
  Field[10]: float m6 // RL_Matrix third row (4 components)
  Field[11]: float m10 // RL_Matrix third row (4 components)
  Field[12]: float m14 // RL_Matrix third row (4 components)
  Field[13]: float m3 // RL_Matrix fourth row (4 components)
  Field[14]: float m7 // RL_Matrix fourth row (4 components)
  Field[15]: float m11 // RL_Matrix fourth row (4 components)
  Field[16]: float m15 // RL_Matrix fourth row (4 components)
Struct 05: RL_Color (4 fields)
  Name: RL_Color
  Description: RL_Color, 4 components, R8G8B8A8 (32bit)
  Field[1]: unsigned char r // RL_Color red value
  Field[2]: unsigned char g // RL_Color green value
  Field[3]: unsigned char b // RL_Color blue value
  Field[4]: unsigned char a // RL_Color alpha value
Struct 06: RL_Rectangle (4 fields)
  Name: RL_Rectangle
  Description: RL_Rectangle, 4 components
  Field[1]: float x // RL_Rectangle top-left corner position x
  Field[2]: float y // RL_Rectangle top-left corner position y
  Field[3]: float width // RL_Rectangle width
  Field[4]: float height // RL_Rectangle height
Struct 07: RL_Image (5 fields)
  Name: RL_Image
  Description: RL_Image, pixel data stored in CPU memory (RAM)
  Field[1]: void * data // RL_Image raw data
  Field[2]: int width // RL_Image base width
  Field[3]: int height // RL_Image base height
  Field[4]: int mipmaps // Mipmap levels, 1 by default
  Field[5]: int format // Data format (RL_PixelFormat type)
Struct 08: RL_Texture (5 fields)
  Name: RL_Texture
  Description: RL_Texture, tex data stored in GPU memory (VRAM)
  Field[1]: unsigned int id // OpenGL texture id
  Field[2]: int width // RL_Texture base width
  Field[3]: int height // RL_Texture base height
  Field[4]: int mipmaps // Mipmap levels, 1 by default
  Field[5]: int format // Data format (RL_PixelFormat type)
Struct 09: RL_RenderTexture (3 fields)
  Name: RL_RenderTexture
  Description: RL_RenderTexture, fbo for texture rendering
  Field[1]: unsigned int id // OpenGL framebuffer object id
  Field[2]: RL_Texture texture // RL_Color buffer attachment texture
  Field[3]: RL_Texture depth // Depth buffer attachment texture
Struct 10: RL_NPatchInfo (6 fields)
  Name: RL_NPatchInfo
  Description: RL_NPatchInfo, n-patch layout info
  Field[1]: RL_Rectangle source // RL_Texture source rectangle
  Field[2]: int left // Left border offset
  Field[3]: int top // Top border offset
  Field[4]: int right // Right border offset
  Field[5]: int bottom // Bottom border offset
  Field[6]: int layout // Layout of the n-patch: 3x3, 1x3 or 3x1
Struct 11: RL_GlyphInfo (5 fields)
  Name: RL_GlyphInfo
  Description: RL_GlyphInfo, font characters glyphs info
  Field[1]: int value // Character value (Unicode)
  Field[2]: int offsetX // Character offset X when drawing
  Field[3]: int offsetY // Character offset Y when drawing
  Field[4]: int advanceX // Character advance position X
  Field[5]: RL_Image image // Character image data
Struct 12: RL_Font (6 fields)
  Name: RL_Font
  Description: RL_Font, font texture and RL_GlyphInfo array data
  Field[1]: int baseSize // Base size (default chars height)
  Field[2]: int glyphCount // Number of glyph characters
  Field[3]: int glyphPadding // Padding around the glyph characters
  Field[4]: RL_Texture2D texture // RL_Texture atlas containing the glyphs
  Field[5]: RL_Rectangle * recs // Rectangles in texture for the glyphs
  Field[6]: RL_GlyphInfo * glyphs // Glyphs info data
Struct 13: RL_Camera3D (5 fields)
  Name: RL_Camera3D
  Description: RL_Camera, defines position/orientation in 3d space
  Field[1]: RL_Vector3 position // RL_Camera position
  Field[2]: RL_Vector3 target // RL_Camera target it looks-at
  Field[3]: RL_Vector3 up // RL_Camera up vector (rotation over its axis)
  Field[4]: float fovy // RL_Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
  Field[5]: int projection // RL_Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
Struct 14: RL_Camera2D (4 fields)
  Name: RL_Camera2D
  Description: RL_Camera2D, defines position/orientation in 2d space
  Field[1]: RL_Vector2 offset // RL_Camera offset (displacement from target)
  Field[2]: RL_Vector2 target // RL_Camera target (rotation and zoom origin)
  Field[3]: float rotation // RL_Camera rotation in degrees
  Field[4]: float zoom // RL_Camera zoom (scaling), should be 1.0f by default
Struct 15: RL_Mesh (17 fields)
  Name: RL_Mesh
  Description: RL_Mesh, vertex data and vao/vbo
  Field[1]: int vertexCount // Number of vertices stored in arrays
  Field[2]: int triangleCount // Number of triangles stored (indexed or not)
  Field[3]: float * vertices // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  Field[4]: float * texcoords // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  Field[5]: float * texcoords2 // Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
  Field[6]: float * normals // Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  Field[7]: float * tangents // Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  Field[8]: unsigned char * colors // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  Field[9]: unsigned short * indices // Vertex indices (in case vertex data comes indexed)
  Field[10]: float * animVertices // Animated vertex positions (after bones transformations)
  Field[11]: float * animNormals // Animated normals (after bones transformations)
  Field[12]: unsigned char * boneIds // Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning) (shader-location = 6)
  Field[13]: float * boneWeights // Vertex bone weight, up to 4 bones influence by vertex (skinning) (shader-location = 7)
  Field[14]: RL_Matrix * boneMatrices // Bones animated transformation matrices
  Field[15]: int boneCount // Number of bones
  Field[16]: unsigned int vaoId // OpenGL Vertex Array Object id
  Field[17]: unsigned int * vboId // OpenGL Vertex Buffer Objects id (default vertex data)
Struct 16: RL_Shader (2 fields)
  Name: RL_Shader
  Description: RL_Shader
  Field[1]: unsigned int id // RL_Shader program id
  Field[2]: int * locs // RL_Shader locations array (RL_MAX_SHADER_LOCATIONS)
Struct 17: RL_MaterialMap (3 fields)
  Name: RL_MaterialMap
  Description: RL_MaterialMap
  Field[1]: RL_Texture2D texture // RL_Material map texture
  Field[2]: RL_Color color // RL_Material map color
  Field[3]: float value // RL_Material map value
Struct 18: RL_Material (3 fields)
  Name: RL_Material
  Description: RL_Material, includes shader and maps
  Field[1]: RL_Shader shader // RL_Material shader
  Field[2]: RL_MaterialMap * maps // RL_Material maps array (MAX_MATERIAL_MAPS)
  Field[3]: float[4] params // RL_Material generic parameters (if required)
Struct 19: RL_Transform (3 fields)
  Name: RL_Transform
  Description: RL_Transform, vertex transformation data
  Field[1]: RL_Vector3 translation // Translation
  Field[2]: RL_Quaternion rotation // Rotation
  Field[3]: RL_Vector3 scale // Scale
Struct 20: RL_BoneInfo (2 fields)
  Name: RL_BoneInfo
  Description: Bone, skeletal animation bone
  Field[1]: char[32] name // Bone name
  Field[2]: int parent // Bone parent
Struct 21: RL_Model (9 fields)
  Name: RL_Model
  Description: RL_Model, meshes, materials and animation data
  Field[1]: RL_Matrix transform // Local transform matrix
  Field[2]: int meshCount // Number of meshes
  Field[3]: int materialCount // Number of materials
  Field[4]: RL_Mesh * meshes // Meshes array
  Field[5]: RL_Material * materials // Materials array
  Field[6]: int * meshMaterial // RL_Mesh material number
  Field[7]: int boneCount // Number of bones
  Field[8]: RL_BoneInfo * bones // Bones information (skeleton)
  Field[9]: RL_Transform * bindPose // Bones base transformation (pose)
Struct 22: RL_ModelAnimation (5 fields)
  Name: RL_ModelAnimation
  Description: RL_ModelAnimation
  Field[1]: int boneCount // Number of bones
  Field[2]: int frameCount // Number of animation frames
  Field[3]: RL_BoneInfo * bones // Bones information (skeleton)
  Field[4]: RL_Transform ** framePoses // Poses array by frame
  Field[5]: char[32] name // Animation name
Struct 23: RL_Ray (2 fields)
  Name: RL_Ray
  Description: RL_Ray, ray for raycasting
  Field[1]: RL_Vector3 position // RL_Ray position (origin)
  Field[2]: RL_Vector3 direction // RL_Ray direction (normalized)
Struct 24: RL_RayCollision (4 fields)
  Name: RL_RayCollision
  Description: RL_RayCollision, ray hit information
  Field[1]: bool hit // Did the ray hit something?
  Field[2]: float distance // Distance to the nearest hit
  Field[3]: RL_Vector3 point // Point of the nearest hit
  Field[4]: RL_Vector3 normal // Surface normal of hit
Struct 25: RL_BoundingBox (2 fields)
  Name: RL_BoundingBox
  Description: RL_BoundingBox
  Field[1]: RL_Vector3 min // Minimum vertex box-corner
  Field[2]: RL_Vector3 max // Maximum vertex box-corner
Struct 26: RL_Wave (5 fields)
  Name: RL_Wave
  Description: RL_Wave, audio wave data
  Field[1]: unsigned int frameCount // Total number of frames (considering channels)
  Field[2]: unsigned int sampleRate // Frequency (samples per second)
  Field[3]: unsigned int sampleSize // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  Field[4]: unsigned int channels // Number of channels (1-mono, 2-stereo, ...)
  Field[5]: void * data // Buffer data pointer
Struct 27: RL_AudioStream (5 fields)
  Name: RL_AudioStream
  Description: RL_AudioStream, custom audio stream
  Field[1]: RL_rAudioBuffer * buffer // Pointer to internal data used by the audio system
  Field[2]: RL_rAudioProcessor * processor // Pointer to internal data processor, useful for audio effects
  Field[3]: unsigned int sampleRate // Frequency (samples per second)
  Field[4]: unsigned int sampleSize // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  Field[5]: unsigned int channels // Number of channels (1-mono, 2-stereo, ...)
Struct 28: RL_Sound (2 fields)
  Name: RL_Sound
  Description: RL_Sound
  Field[1]: RL_AudioStream stream // Audio stream
  Field[2]: unsigned int frameCount // Total number of frames (considering channels)
Struct 29: RL_Music (5 fields)
  Name: RL_Music
  Description: RL_Music, audio stream, anything longer than ~10 seconds should be streamed
  Field[1]: RL_AudioStream stream // Audio stream
  Field[2]: unsigned int frameCount // Total number of frames (considering channels)
  Field[3]: bool looping // RL_Music looping enable
  Field[4]: int ctxType // Type of music context (audio filetype)
  Field[5]: void * ctxData // Audio context data, depends on type
Struct 30: RL_VrDeviceInfo (9 fields)
  Name: RL_VrDeviceInfo
  Description: RL_VrDeviceInfo, Head-Mounted-Display device parameters
  Field[1]: int hResolution // Horizontal resolution in pixels
  Field[2]: int vResolution // Vertical resolution in pixels
  Field[3]: float hScreenSize // Horizontal size in meters
  Field[4]: float vScreenSize // Vertical size in meters
  Field[5]: float eyeToScreenDistance // Distance between eye and display in meters
  Field[6]: float lensSeparationDistance // Lens separation distance in meters
  Field[7]: float interpupillaryDistance // IPD (distance between pupils) in meters
  Field[8]: float[4] lensDistortionValues // Lens distortion constant parameters
  Field[9]: float[4] chromaAbCorrection // Chromatic aberration correction parameters
Struct 31: RL_VrStereoConfig (8 fields)
  Name: RL_VrStereoConfig
  Description: RL_VrStereoConfig, VR stereo rendering configuration for simulator
  Field[1]: RL_Matrix[2] projection // VR projection matrices (per eye)
  Field[2]: RL_Matrix[2] viewOffset // VR view offset matrices (per eye)
  Field[3]: float[2] leftLensCenter // VR left lens center
  Field[4]: float[2] rightLensCenter // VR right lens center
  Field[5]: float[2] leftScreenCenter // VR left screen center
  Field[6]: float[2] rightScreenCenter // VR right screen center
  Field[7]: float[2] scale // VR distortion scale
  Field[8]: float[2] scaleIn // VR distortion scale in
Struct 32: RL_FilePathList (3 fields)
  Name: RL_FilePathList
  Description: File path list
  Field[1]: unsigned int capacity // Filepaths max entries
  Field[2]: unsigned int count // Filepaths entries count
  Field[3]: char ** paths // Filepaths entries
Struct 33: RL_AutomationEvent (3 fields)
  Name: RL_AutomationEvent
  Description: Automation event
  Field[1]: unsigned int frame // Event frame
  Field[2]: unsigned int type // Event type (AutomationEventType)
  Field[3]: int[4] params // Event parameters (if required)
Struct 34: RL_AutomationEventList (3 fields)
  Name: RL_AutomationEventList
  Description: Automation event list
  Field[1]: unsigned int capacity // Events max entries (MAX_AUTOMATION_EVENTS)
  Field[2]: unsigned int count // Events entries count
  Field[3]: RL_AutomationEvent * events // Events entries

Aliases found: 5

Alias 001: RL_Quaternion
  Type: RL_Vector4
  Name: RL_Quaternion
  Description: RL_Quaternion, 4 components (RL_Vector4 alias)
Alias 002: RL_Texture2D
  Type: RL_Texture
  Name: RL_Texture2D
  Description: RL_Texture2D, same as RL_Texture
Alias 003: RL_TextureCubemap
  Type: RL_Texture
  Name: RL_TextureCubemap
  Description: RL_TextureCubemap, same as RL_Texture
Alias 004: RL_RenderTexture2D
  Type: RL_RenderTexture
  Name: RL_RenderTexture2D
  Description: RL_RenderTexture2D, same as RL_RenderTexture
Alias 005: RL_Camera
  Type: RL_Camera3D
  Name: RL_Camera
  Description: RL_Camera type fallback, defaults to RL_Camera3D

Enums found: 21

Enum 01: RL_ConfigFlags (16 values)
  Name: RL_ConfigFlags
  Description: System/Window config flags
  Value[FLAG_VSYNC_HINT]: 64
  Value[FLAG_FULLSCREEN_MODE]: 2
  Value[FLAG_WINDOW_RESIZABLE]: 4
  Value[FLAG_WINDOW_UNDECORATED]: 8
  Value[FLAG_WINDOW_HIDDEN]: 128
  Value[FLAG_WINDOW_MINIMIZED]: 512
  Value[FLAG_WINDOW_MAXIMIZED]: 1024
  Value[FLAG_WINDOW_UNFOCUSED]: 2048
  Value[FLAG_WINDOW_TOPMOST]: 4096
  Value[FLAG_WINDOW_ALWAYS_RUN]: 256
  Value[FLAG_WINDOW_TRANSPARENT]: 16
  Value[FLAG_WINDOW_HIGHDPI]: 8192
  Value[FLAG_WINDOW_MOUSE_PASSTHROUGH]: 16384
  Value[FLAG_BORDERLESS_WINDOWED_MODE]: 32768
  Value[FLAG_MSAA_4X_HINT]: 32
  Value[FLAG_INTERLACED_HINT]: 65536
Enum 02: RL_TraceLogLevel (8 values)
  Name: RL_TraceLogLevel
  Description: Trace log level
  Value[LOG_ALL]: 0
  Value[LOG_TRACE]: 1
  Value[LOG_DEBUG]: 2
  Value[LOG_INFO]: 3
  Value[LOG_WARNING]: 4
  Value[LOG_ERROR]: 5
  Value[LOG_FATAL]: 6
  Value[LOG_NONE]: 7
Enum 03: RL_KeyboardKey (110 values)
  Name: RL_KeyboardKey
  Description: Keyboard keys (US keyboard layout)
  Value[KEY_NULL]: 0
  Value[KEY_APOSTROPHE]: 39
  Value[KEY_COMMA]: 44
  Value[KEY_MINUS]: 45
  Value[KEY_PERIOD]: 46
  Value[KEY_SLASH]: 47
  Value[KEY_ZERO]: 48
  Value[KEY_ONE]: 49
  Value[KEY_TWO]: 50
  Value[KEY_THREE]: 51
  Value[KEY_FOUR]: 52
  Value[KEY_FIVE]: 53
  Value[KEY_SIX]: 54
  Value[KEY_SEVEN]: 55
  Value[KEY_EIGHT]: 56
  Value[KEY_NINE]: 57
  Value[KEY_SEMICOLON]: 59
  Value[KEY_EQUAL]: 61
  Value[KEY_A]: 65
  Value[KEY_B]: 66
  Value[KEY_C]: 67
  Value[KEY_D]: 68
  Value[KEY_E]: 69
  Value[KEY_F]: 70
  Value[KEY_G]: 71
  Value[KEY_H]: 72
  Value[KEY_I]: 73
  Value[KEY_J]: 74
  Value[KEY_K]: 75
  Value[KEY_L]: 76
  Value[KEY_M]: 77
  Value[KEY_N]: 78
  Value[KEY_O]: 79
  Value[KEY_P]: 80
  Value[KEY_Q]: 81
  Value[KEY_R]: 82
  Value[KEY_S]: 83
  Value[KEY_T]: 84
  Value[KEY_U]: 85
  Value[KEY_V]: 86
  Value[KEY_W]: 87
  Value[KEY_X]: 88
  Value[KEY_Y]: 89
  Value[KEY_Z]: 90
  Value[KEY_LEFT_BRACKET]: 91
  Value[KEY_BACKSLASH]: 92
  Value[KEY_RIGHT_BRACKET]: 93
  Value[KEY_GRAVE]: 96
  Value[KEY_SPACE]: 32
  Value[KEY_ESCAPE]: 256
  Value[KEY_ENTER]: 257
  Value[KEY_TAB]: 258
  Value[KEY_BACKSPACE]: 259
  Value[KEY_INSERT]: 260
  Value[KEY_DELETE]: 261
  Value[KEY_RIGHT]: 262
  Value[KEY_LEFT]: 263
  Value[KEY_DOWN]: 264
  Value[KEY_UP]: 265
  Value[KEY_PAGE_UP]: 266
  Value[KEY_PAGE_DOWN]: 267
  Value[KEY_HOME]: 268
  Value[KEY_END]: 269
  Value[KEY_CAPS_LOCK]: 280
  Value[KEY_SCROLL_LOCK]: 281
  Value[KEY_NUM_LOCK]: 282
  Value[KEY_PRINT_SCREEN]: 283
  Value[KEY_PAUSE]: 284
  Value[KEY_F1]: 290
  Value[KEY_F2]: 291
  Value[KEY_F3]: 292
  Value[KEY_F4]: 293
  Value[KEY_F5]: 294
  Value[KEY_F6]: 295
  Value[KEY_F7]: 296
  Value[KEY_F8]: 297
  Value[KEY_F9]: 298
  Value[KEY_F10]: 299
  Value[KEY_F11]: 300
  Value[KEY_F12]: 301
  Value[KEY_LEFT_SHIFT]: 340
  Value[KEY_LEFT_CONTROL]: 341
  Value[KEY_LEFT_ALT]: 342
  Value[KEY_LEFT_SUPER]: 343
  Value[KEY_RIGHT_SHIFT]: 344
  Value[KEY_RIGHT_CONTROL]: 345
  Value[KEY_RIGHT_ALT]: 346
  Value[KEY_RIGHT_SUPER]: 347
  Value[KEY_KB_MENU]: 348
  Value[KEY_KP_0]: 320
  Value[KEY_KP_1]: 321
  Value[KEY_KP_2]: 322
  Value[KEY_KP_3]: 323
  Value[KEY_KP_4]: 324
  Value[KEY_KP_5]: 325
  Value[KEY_KP_6]: 326
  Value[KEY_KP_7]: 327
  Value[KEY_KP_8]: 328
  Value[KEY_KP_9]: 329
  Value[KEY_KP_DECIMAL]: 330
  Value[KEY_KP_DIVIDE]: 331
  Value[KEY_KP_MULTIPLY]: 332
  Value[KEY_KP_SUBTRACT]: 333
  Value[KEY_KP_ADD]: 334
  Value[KEY_KP_ENTER]: 335
  Value[KEY_KP_EQUAL]: 336
  Value[KEY_BACK]: 4
  Value[KEY_MENU]: 5
  Value[KEY_VOLUME_UP]: 24
  Value[KEY_VOLUME_DOWN]: 25
Enum 04: RL_MouseButton (7 values)
  Name: RL_MouseButton
  Description: Mouse buttons
  Value[MOUSE_BUTTON_LEFT]: 0
  Value[MOUSE_BUTTON_RIGHT]: 1
  Value[MOUSE_BUTTON_MIDDLE]: 2
  Value[MOUSE_BUTTON_SIDE]: 3
  Value[MOUSE_BUTTON_EXTRA]: 4
  Value[MOUSE_BUTTON_FORWARD]: 5
  Value[MOUSE_BUTTON_BACK]: 6
Enum 05: RL_MouseCursor (11 values)
  Name: RL_MouseCursor
  Description: Mouse cursor
  Value[MOUSE_CURSOR_DEFAULT]: 0
  Value[MOUSE_CURSOR_ARROW]: 1
  Value[MOUSE_CURSOR_IBEAM]: 2
  Value[MOUSE_CURSOR_CROSSHAIR]: 3
  Value[MOUSE_CURSOR_POINTING_HAND]: 4
  Value[MOUSE_CURSOR_RESIZE_EW]: 5
  Value[MOUSE_CURSOR_RESIZE_NS]: 6
  Value[MOUSE_CURSOR_RESIZE_NWSE]: 7
  Value[MOUSE_CURSOR_RESIZE_NESW]: 8
  Value[MOUSE_CURSOR_RESIZE_ALL]: 9
  Value[MOUSE_CURSOR_NOT_ALLOWED]: 10
Enum 06: RL_GamepadButton (18 values)
  Name: RL_GamepadButton
  Description: Gamepad buttons
  Value[GAMEPAD_BUTTON_UNKNOWN]: 0
  Value[GAMEPAD_BUTTON_LEFT_FACE_UP]: 1
  Value[GAMEPAD_BUTTON_LEFT_FACE_RIGHT]: 2
  Value[GAMEPAD_BUTTON_LEFT_FACE_DOWN]: 3
  Value[GAMEPAD_BUTTON_LEFT_FACE_LEFT]: 4
  Value[GAMEPAD_BUTTON_RIGHT_FACE_UP]: 5
  Value[GAMEPAD_BUTTON_RIGHT_FACE_RIGHT]: 6
  Value[GAMEPAD_BUTTON_RIGHT_FACE_DOWN]: 7
  Value[GAMEPAD_BUTTON_RIGHT_FACE_LEFT]: 8
  Value[GAMEPAD_BUTTON_LEFT_TRIGGER_1]: 9
  Value[GAMEPAD_BUTTON_LEFT_TRIGGER_2]: 10
  Value[GAMEPAD_BUTTON_RIGHT_TRIGGER_1]: 11
  Value[GAMEPAD_BUTTON_RIGHT_TRIGGER_2]: 12
  Value[GAMEPAD_BUTTON_MIDDLE_LEFT]: 13
  Value[GAMEPAD_BUTTON_MIDDLE]: 14
  Value[GAMEPAD_BUTTON_MIDDLE_RIGHT]: 15
  Value[GAMEPAD_BUTTON_LEFT_THUMB]: 16
  Value[GAMEPAD_BUTTON_RIGHT_THUMB]: 17
Enum 07: RL_GamepadAxis (6 values)
  Name: RL_GamepadAxis
  Description: Gamepad axis
  Value[GAMEPAD_AXIS_LEFT_X]: 0
  Value[GAMEPAD_AXIS_LEFT_Y]: 1
  Value[GAMEPAD_AXIS_RIGHT_X]: 2
  Value[GAMEPAD_AXIS_RIGHT_Y]: 3
  Value[GAMEPAD_AXIS_LEFT_TRIGGER]: 4
  Value[GAMEPAD_AXIS_RIGHT_TRIGGER]: 5
Enum 08: RL_MaterialMapIndex (11 values)
  Name: RL_MaterialMapIndex
  Description: RL_Material map index
  Value[MATERIAL_MAP_ALBEDO]: 0
  Value[MATERIAL_MAP_METALNESS]: 1
  Value[MATERIAL_MAP_NORMAL]: 2
  Value[MATERIAL_MAP_ROUGHNESS]: 3
  Value[MATERIAL_MAP_OCCLUSION]: 4
  Value[MATERIAL_MAP_EMISSION]: 5
  Value[MATERIAL_MAP_HEIGHT]: 6
  Value[MATERIAL_MAP_CUBEMAP]: 7
  Value[MATERIAL_MAP_IRRADIANCE]: 8
  Value[MATERIAL_MAP_PREFILTER]: 9
  Value[MATERIAL_MAP_BRDF]: 10
Enum 09: RL_ShaderLocationIndex (29 values)
  Name: RL_ShaderLocationIndex
  Description: RL_Shader location index
  Value[SHADER_LOC_VERTEX_POSITION]: 0
  Value[SHADER_LOC_VERTEX_TEXCOORD01]: 1
  Value[SHADER_LOC_VERTEX_TEXCOORD02]: 2
  Value[SHADER_LOC_VERTEX_NORMAL]: 3
  Value[SHADER_LOC_VERTEX_TANGENT]: 4
  Value[SHADER_LOC_VERTEX_COLOR]: 5
  Value[SHADER_LOC_MATRIX_MVP]: 6
  Value[SHADER_LOC_MATRIX_VIEW]: 7
  Value[SHADER_LOC_MATRIX_PROJECTION]: 8
  Value[SHADER_LOC_MATRIX_MODEL]: 9
  Value[SHADER_LOC_MATRIX_NORMAL]: 10
  Value[SHADER_LOC_VECTOR_VIEW]: 11
  Value[SHADER_LOC_COLOR_DIFFUSE]: 12
  Value[SHADER_LOC_COLOR_SPECULAR]: 13
  Value[SHADER_LOC_COLOR_AMBIENT]: 14
  Value[SHADER_LOC_MAP_ALBEDO]: 15
  Value[SHADER_LOC_MAP_METALNESS]: 16
  Value[SHADER_LOC_MAP_NORMAL]: 17
  Value[SHADER_LOC_MAP_ROUGHNESS]: 18
  Value[SHADER_LOC_MAP_OCCLUSION]: 19
  Value[SHADER_LOC_MAP_EMISSION]: 20
  Value[SHADER_LOC_MAP_HEIGHT]: 21
  Value[SHADER_LOC_MAP_CUBEMAP]: 22
  Value[SHADER_LOC_MAP_IRRADIANCE]: 23
  Value[SHADER_LOC_MAP_PREFILTER]: 24
  Value[SHADER_LOC_MAP_BRDF]: 25
  Value[SHADER_LOC_VERTEX_BONEIDS]: 26
  Value[SHADER_LOC_VERTEX_BONEWEIGHTS]: 27
  Value[SHADER_LOC_BONE_MATRICES]: 28
Enum 10: RL_ShaderUniformDataType (9 values)
  Name: RL_ShaderUniformDataType
  Description: RL_Shader uniform data type
  Value[SHADER_UNIFORM_FLOAT]: 0
  Value[SHADER_UNIFORM_VEC2]: 1
  Value[SHADER_UNIFORM_VEC3]: 2
  Value[SHADER_UNIFORM_VEC4]: 3
  Value[SHADER_UNIFORM_INT]: 4
  Value[SHADER_UNIFORM_IVEC2]: 5
  Value[SHADER_UNIFORM_IVEC3]: 6
  Value[SHADER_UNIFORM_IVEC4]: 7
  Value[SHADER_UNIFORM_SAMPLER2D]: 8
Enum 11: RL_ShaderAttributeDataType (4 values)
  Name: RL_ShaderAttributeDataType
  Description: RL_Shader attribute data types
  Value[SHADER_ATTRIB_FLOAT]: 0
  Value[SHADER_ATTRIB_VEC2]: 1
  Value[SHADER_ATTRIB_VEC3]: 2
  Value[SHADER_ATTRIB_VEC4]: 3
Enum 12: RL_PixelFormat (24 values)
  Name: RL_PixelFormat
  Description: Pixel formats
  Value[PIXELFORMAT_UNCOMPRESSED_GRAYSCALE]: 1
  Value[PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA]: 2
  Value[PIXELFORMAT_UNCOMPRESSED_R5G6B5]: 3
  Value[PIXELFORMAT_UNCOMPRESSED_R8G8B8]: 4
  Value[PIXELFORMAT_UNCOMPRESSED_R5G5B5A1]: 5
  Value[PIXELFORMAT_UNCOMPRESSED_R4G4B4A4]: 6
  Value[PIXELFORMAT_UNCOMPRESSED_R8G8B8A8]: 7
  Value[PIXELFORMAT_UNCOMPRESSED_R32]: 8
  Value[PIXELFORMAT_UNCOMPRESSED_R32G32B32]: 9
  Value[PIXELFORMAT_UNCOMPRESSED_R32G32B32A32]: 10
  Value[PIXELFORMAT_UNCOMPRESSED_R16]: 11
  Value[PIXELFORMAT_UNCOMPRESSED_R16G16B16]: 12
  Value[PIXELFORMAT_UNCOMPRESSED_R16G16B16A16]: 13
  Value[PIXELFORMAT_COMPRESSED_DXT1_RGB]: 14
  Value[PIXELFORMAT_COMPRESSED_DXT1_RGBA]: 15
  Value[PIXELFORMAT_COMPRESSED_DXT3_RGBA]: 16
  Value[PIXELFORMAT_COMPRESSED_DXT5_RGBA]: 17
  Value[PIXELFORMAT_COMPRESSED_ETC1_RGB]: 18
  Value[PIXELFORMAT_COMPRESSED_ETC2_RGB]: 19
  Value[PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA]: 20
  Value[PIXELFORMAT_COMPRESSED_PVRT_RGB]: 21
  Value[PIXELFORMAT_COMPRESSED_PVRT_RGBA]: 22
  Value[PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA]: 23
  Value[PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA]: 24
Enum 13: RL_TextureFilter (6 values)
  Name: RL_TextureFilter
  Description: RL_Texture parameters: filter mode
  Value[TEXTURE_FILTER_POINT]: 0
  Value[TEXTURE_FILTER_BILINEAR]: 1
  Value[TEXTURE_FILTER_TRILINEAR]: 2
  Value[TEXTURE_FILTER_ANISOTROPIC_4X]: 3
  Value[TEXTURE_FILTER_ANISOTROPIC_8X]: 4
  Value[TEXTURE_FILTER_ANISOTROPIC_16X]: 5
Enum 14: RL_TextureWrap (4 values)
  Name: RL_TextureWrap
  Description: RL_Texture parameters: wrap mode
  Value[TEXTURE_WRAP_REPEAT]: 0
  Value[TEXTURE_WRAP_CLAMP]: 1
  Value[TEXTURE_WRAP_MIRROR_REPEAT]: 2
  Value[TEXTURE_WRAP_MIRROR_CLAMP]: 3
Enum 15: RL_CubemapLayout (6 values)
  Name: RL_CubemapLayout
  Description: Cubemap layouts
  Value[CUBEMAP_LAYOUT_AUTO_DETECT]: 0
  Value[CUBEMAP_LAYOUT_LINE_VERTICAL]: 1
  Value[CUBEMAP_LAYOUT_LINE_HORIZONTAL]: 2
  Value[CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR]: 3
  Value[CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE]: 4
  Value[CUBEMAP_LAYOUT_PANORAMA]: 5
Enum 16: RL_FontType (3 values)
  Name: RL_FontType
  Description: RL_Font type, defines generation method
  Value[FONT_DEFAULT]: 0
  Value[FONT_BITMAP]: 1
  Value[FONT_SDF]: 2
Enum 17: RL_BlendMode (8 values)
  Name: RL_BlendMode
  Description: RL_Color blending modes (pre-defined)
  Value[BLEND_ALPHA]: 0
  Value[BLEND_ADDITIVE]: 1
  Value[BLEND_MULTIPLIED]: 2
  Value[BLEND_ADD_COLORS]: 3
  Value[BLEND_SUBTRACT_COLORS]: 4
  Value[BLEND_ALPHA_PREMULTIPLY]: 5
  Value[BLEND_CUSTOM]: 6
  Value[BLEND_CUSTOM_SEPARATE]: 7
Enum 18: RL_Gesture (11 values)
  Name: RL_Gesture
  Description: RL_Gesture
  Value[GESTURE_NONE]: 0
  Value[GESTURE_TAP]: 1
  Value[GESTURE_DOUBLETAP]: 2
  Value[GESTURE_HOLD]: 4
  Value[GESTURE_DRAG]: 8
  Value[GESTURE_SWIPE_RIGHT]: 16
  Value[GESTURE_SWIPE_LEFT]: 32
  Value[GESTURE_SWIPE_UP]: 64
  Value[GESTURE_SWIPE_DOWN]: 128
  Value[GESTURE_PINCH_IN]: 256
  Value[GESTURE_PINCH_OUT]: 512
Enum 19: RL_CameraMode (5 values)
  Name: RL_CameraMode
  Description: RL_Camera system modes
  Value[CAMERA_CUSTOM]: 0
  Value[CAMERA_FREE]: 1
  Value[CAMERA_ORBITAL]: 2
  Value[CAMERA_FIRST_PERSON]: 3
  Value[CAMERA_THIRD_PERSON]: 4
Enum 20: RL_CameraProjection (2 values)
  Name: RL_CameraProjection
  Description: RL_Camera projection
  Value[CAMERA_PERSPECTIVE]: 0
  Value[CAMERA_ORTHOGRAPHIC]: 1
Enum 21: RL_NPatchLayout (3 values)
  Name: RL_NPatchLayout
  Description: N-patch layout
  Value[NPATCH_NINE_PATCH]: 0
  Value[NPATCH_THREE_PATCH_VERTICAL]: 1
  Value[NPATCH_THREE_PATCH_HORIZONTAL]: 2

Callbacks found: 6

Callback 001: RL_TraceLogCallback() (3 input parameters)
  Name: RL_TraceLogCallback
  Return type: void
  Description: Logging: Redirect trace log messages
  Param[1]: logLevel (type: int)
  Param[2]: text (type: const char *)
  Param[3]: args (type: va_list)
Callback 002: RL_LoadFileDataCallback() (2 input parameters)
  Name: RL_LoadFileDataCallback
  Return type: unsigned char *
  Description: FileIO: Load binary data
  Param[1]: fileName (type: const char *)
  Param[2]: dataSize (type: int *)
Callback 003: RL_SaveFileDataCallback() (3 input parameters)
  Name: RL_SaveFileDataCallback
  Return type: bool
  Description: FileIO: Save binary data
  Param[1]: fileName (type: const char *)
  Param[2]: data (type: void *)
  Param[3]: dataSize (type: int)
Callback 004: RL_LoadFileTextCallback() (1 input parameters)
  Name: RL_LoadFileTextCallback
  Return type: char *
  Description: FileIO: Load text data
  Param[1]: fileName (type: const char *)
Callback 005: RL_SaveFileTextCallback() (2 input parameters)
  Name: RL_SaveFileTextCallback
  Return type: bool
  Description: FileIO: Save text data
  Param[1]: fileName (type: const char *)
  Param[2]: text (type: char *)
Callback 006: AudioCallback() (2 input parameters)
  Name: AudioCallback
  Return type: void
  Description: 
  Param[1]: bufferData (type: void *)
  Param[2]: frames (type: unsigned int)

Functions found: 578

Function 001: RL_InitWindow() (3 input parameters)
  Name: RL_InitWindow
  Return type: void
  Description: Initialize window and OpenGL context
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: title (type: const char *)
Function 002: RL_CloseWindow() (0 input parameters)
  Name: RL_CloseWindow
  Return type: void
  Description: Close window and unload OpenGL context
  No input parameters
Function 003: RL_WindowShouldClose() (0 input parameters)
  Name: RL_WindowShouldClose
  Return type: bool
  Description: Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
  No input parameters
Function 004: RL_IsWindowReady() (0 input parameters)
  Name: RL_IsWindowReady
  Return type: bool
  Description: Check if window has been initialized successfully
  No input parameters
Function 005: RL_IsWindowFullscreen() (0 input parameters)
  Name: RL_IsWindowFullscreen
  Return type: bool
  Description: Check if window is currently fullscreen
  No input parameters
Function 006: RL_IsWindowHidden() (0 input parameters)
  Name: RL_IsWindowHidden
  Return type: bool
  Description: Check if window is currently hidden (only PLATFORM_DESKTOP)
  No input parameters
Function 007: RL_IsWindowMinimized() (0 input parameters)
  Name: RL_IsWindowMinimized
  Return type: bool
  Description: Check if window is currently minimized (only PLATFORM_DESKTOP)
  No input parameters
Function 008: RL_IsWindowMaximized() (0 input parameters)
  Name: RL_IsWindowMaximized
  Return type: bool
  Description: Check if window is currently maximized (only PLATFORM_DESKTOP)
  No input parameters
Function 009: RL_IsWindowFocused() (0 input parameters)
  Name: RL_IsWindowFocused
  Return type: bool
  Description: Check if window is currently focused (only PLATFORM_DESKTOP)
  No input parameters
Function 010: RL_IsWindowResized() (0 input parameters)
  Name: RL_IsWindowResized
  Return type: bool
  Description: Check if window has been resized last frame
  No input parameters
Function 011: RL_IsWindowState() (1 input parameters)
  Name: RL_IsWindowState
  Return type: bool
  Description: Check if one specific window flag is enabled
  Param[1]: flag (type: unsigned int)
Function 012: RL_SetWindowState() (1 input parameters)
  Name: RL_SetWindowState
  Return type: void
  Description: Set window configuration state using flags (only PLATFORM_DESKTOP)
  Param[1]: flags (type: unsigned int)
Function 013: RL_ClearWindowState() (1 input parameters)
  Name: RL_ClearWindowState
  Return type: void
  Description: Clear window configuration state flags
  Param[1]: flags (type: unsigned int)
Function 014: RL_ToggleFullscreen() (0 input parameters)
  Name: RL_ToggleFullscreen
  Return type: void
  Description: Toggle window state: fullscreen/windowed [resizes monitor to match window resolution] (only PLATFORM_DESKTOP)
  No input parameters
Function 015: RL_ToggleBorderlessWindowed() (0 input parameters)
  Name: RL_ToggleBorderlessWindowed
  Return type: void
  Description: Toggle window state: borderless windowed [resizes window to match monitor resolution] (only PLATFORM_DESKTOP)
  No input parameters
Function 016: RL_MaximizeWindow() (0 input parameters)
  Name: RL_MaximizeWindow
  Return type: void
  Description: Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
  No input parameters
Function 017: RL_MinimizeWindow() (0 input parameters)
  Name: RL_MinimizeWindow
  Return type: void
  Description: Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
  No input parameters
Function 018: RL_RestoreWindow() (0 input parameters)
  Name: RL_RestoreWindow
  Return type: void
  Description: Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
  No input parameters
Function 019: RL_SetWindowIcon() (1 input parameters)
  Name: RL_SetWindowIcon
  Return type: void
  Description: Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
  Param[1]: image (type: RL_Image)
Function 020: RL_SetWindowIcons() (2 input parameters)
  Name: RL_SetWindowIcons
  Return type: void
  Description: Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
  Param[1]: images (type: RL_Image *)
  Param[2]: count (type: int)
Function 021: RL_SetWindowTitle() (1 input parameters)
  Name: RL_SetWindowTitle
  Return type: void
  Description: Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
  Param[1]: title (type: const char *)
Function 022: RL_SetWindowPosition() (2 input parameters)
  Name: RL_SetWindowPosition
  Return type: void
  Description: Set window position on screen (only PLATFORM_DESKTOP)
  Param[1]: x (type: int)
  Param[2]: y (type: int)
Function 023: RL_SetWindowMonitor() (1 input parameters)
  Name: RL_SetWindowMonitor
  Return type: void
  Description: Set monitor for the current window
  Param[1]: monitor (type: int)
Function 024: RL_SetWindowMinSize() (2 input parameters)
  Name: RL_SetWindowMinSize
  Return type: void
  Description: Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 025: RL_SetWindowMaxSize() (2 input parameters)
  Name: RL_SetWindowMaxSize
  Return type: void
  Description: Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 026: RL_SetWindowSize() (2 input parameters)
  Name: RL_SetWindowSize
  Return type: void
  Description: Set window dimensions
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 027: RL_SetWindowOpacity() (1 input parameters)
  Name: RL_SetWindowOpacity
  Return type: void
  Description: Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
  Param[1]: opacity (type: float)
Function 028: RL_SetWindowFocused() (0 input parameters)
  Name: RL_SetWindowFocused
  Return type: void
  Description: Set window focused (only PLATFORM_DESKTOP)
  No input parameters
Function 029: RL_GetWindowHandle() (0 input parameters)
  Name: RL_GetWindowHandle
  Return type: void *
  Description: Get native window handle
  No input parameters
Function 030: RL_GetScreenWidth() (0 input parameters)
  Name: RL_GetScreenWidth
  Return type: int
  Description: Get current screen width
  No input parameters
Function 031: RL_GetScreenHeight() (0 input parameters)
  Name: RL_GetScreenHeight
  Return type: int
  Description: Get current screen height
  No input parameters
Function 032: RL_GetRenderWidth() (0 input parameters)
  Name: RL_GetRenderWidth
  Return type: int
  Description: Get current render width (it considers HiDPI)
  No input parameters
Function 033: RL_GetRenderHeight() (0 input parameters)
  Name: RL_GetRenderHeight
  Return type: int
  Description: Get current render height (it considers HiDPI)
  No input parameters
Function 034: RL_GetMonitorCount() (0 input parameters)
  Name: RL_GetMonitorCount
  Return type: int
  Description: Get number of connected monitors
  No input parameters
Function 035: RL_GetCurrentMonitor() (0 input parameters)
  Name: RL_GetCurrentMonitor
  Return type: int
  Description: Get current connected monitor
  No input parameters
Function 036: RL_GetMonitorPosition() (1 input parameters)
  Name: RL_GetMonitorPosition
  Return type: RL_Vector2
  Description: Get specified monitor position
  Param[1]: monitor (type: int)
Function 037: RL_GetMonitorWidth() (1 input parameters)
  Name: RL_GetMonitorWidth
  Return type: int
  Description: Get specified monitor width (current video mode used by monitor)
  Param[1]: monitor (type: int)
Function 038: RL_GetMonitorHeight() (1 input parameters)
  Name: RL_GetMonitorHeight
  Return type: int
  Description: Get specified monitor height (current video mode used by monitor)
  Param[1]: monitor (type: int)
Function 039: RL_GetMonitorPhysicalWidth() (1 input parameters)
  Name: RL_GetMonitorPhysicalWidth
  Return type: int
  Description: Get specified monitor physical width in millimetres
  Param[1]: monitor (type: int)
Function 040: RL_GetMonitorPhysicalHeight() (1 input parameters)
  Name: RL_GetMonitorPhysicalHeight
  Return type: int
  Description: Get specified monitor physical height in millimetres
  Param[1]: monitor (type: int)
Function 041: RL_GetMonitorRefreshRate() (1 input parameters)
  Name: RL_GetMonitorRefreshRate
  Return type: int
  Description: Get specified monitor refresh rate
  Param[1]: monitor (type: int)
Function 042: RL_GetWindowPosition() (0 input parameters)
  Name: RL_GetWindowPosition
  Return type: RL_Vector2
  Description: Get window position XY on monitor
  No input parameters
Function 043: RL_GetWindowScaleDPI() (0 input parameters)
  Name: RL_GetWindowScaleDPI
  Return type: RL_Vector2
  Description: Get window scale DPI factor
  No input parameters
Function 044: RL_GetMonitorName() (1 input parameters)
  Name: RL_GetMonitorName
  Return type: const char *
  Description: Get the human-readable, UTF-8 encoded name of the specified monitor
  Param[1]: monitor (type: int)
Function 045: RL_SetClipboardText() (1 input parameters)
  Name: RL_SetClipboardText
  Return type: void
  Description: Set clipboard text content
  Param[1]: text (type: const char *)
Function 046: RL_GetClipboardText() (0 input parameters)
  Name: RL_GetClipboardText
  Return type: const char *
  Description: Get clipboard text content
  No input parameters
Function 047: RL_EnableEventWaiting() (0 input parameters)
  Name: RL_EnableEventWaiting
  Return type: void
  Description: Enable waiting for events on RL_EndDrawing(), no automatic event polling
  No input parameters
Function 048: RL_DisableEventWaiting() (0 input parameters)
  Name: RL_DisableEventWaiting
  Return type: void
  Description: Disable waiting for events on RL_EndDrawing(), automatic events polling
  No input parameters
Function 049: RL_ShowCursor() (0 input parameters)
  Name: RL_ShowCursor
  Return type: void
  Description: Shows cursor
  No input parameters
Function 050: RL_HideCursor() (0 input parameters)
  Name: RL_HideCursor
  Return type: void
  Description: Hides cursor
  No input parameters
Function 051: RL_IsCursorHidden() (0 input parameters)
  Name: RL_IsCursorHidden
  Return type: bool
  Description: Check if cursor is not visible
  No input parameters
Function 052: RL_EnableCursor() (0 input parameters)
  Name: RL_EnableCursor
  Return type: void
  Description: Enables cursor (unlock cursor)
  No input parameters
Function 053: RL_DisableCursor() (0 input parameters)
  Name: RL_DisableCursor
  Return type: void
  Description: Disables cursor (lock cursor)
  No input parameters
Function 054: RL_IsCursorOnScreen() (0 input parameters)
  Name: RL_IsCursorOnScreen
  Return type: bool
  Description: Check if cursor is on the screen
  No input parameters
Function 055: RL_ClearBackground() (1 input parameters)
  Name: RL_ClearBackground
  Return type: void
  Description: Set background color (framebuffer clear color)
  Param[1]: color (type: RL_Color)
Function 056: RL_BeginDrawing() (0 input parameters)
  Name: RL_BeginDrawing
  Return type: void
  Description: Setup canvas (framebuffer) to start drawing
  No input parameters
Function 057: RL_EndDrawing() (0 input parameters)
  Name: RL_EndDrawing
  Return type: void
  Description: End canvas drawing and swap buffers (double buffering)
  No input parameters
Function 058: RL_BeginMode2D() (1 input parameters)
  Name: RL_BeginMode2D
  Return type: void
  Description: Begin 2D mode with custom camera (2D)
  Param[1]: camera (type: RL_Camera2D)
Function 059: RL_EndMode2D() (0 input parameters)
  Name: RL_EndMode2D
  Return type: void
  Description: Ends 2D mode with custom camera
  No input parameters
Function 060: RL_BeginMode3D() (1 input parameters)
  Name: RL_BeginMode3D
  Return type: void
  Description: Begin 3D mode with custom camera (3D)
  Param[1]: camera (type: RL_Camera3D)
Function 061: RL_EndMode3D() (0 input parameters)
  Name: RL_EndMode3D
  Return type: void
  Description: Ends 3D mode and returns to default 2D orthographic mode
  No input parameters
Function 062: RL_BeginTextureMode() (1 input parameters)
  Name: RL_BeginTextureMode
  Return type: void
  Description: Begin drawing to render texture
  Param[1]: target (type: RL_RenderTexture2D)
Function 063: RL_EndTextureMode() (0 input parameters)
  Name: RL_EndTextureMode
  Return type: void
  Description: Ends drawing to render texture
  No input parameters
Function 064: RL_BeginShaderMode() (1 input parameters)
  Name: RL_BeginShaderMode
  Return type: void
  Description: Begin custom shader drawing
  Param[1]: shader (type: RL_Shader)
Function 065: RL_EndShaderMode() (0 input parameters)
  Name: RL_EndShaderMode
  Return type: void
  Description: End custom shader drawing (use default shader)
  No input parameters
Function 066: RL_BeginBlendMode() (1 input parameters)
  Name: RL_BeginBlendMode
  Return type: void
  Description: Begin blending mode (alpha, additive, multiplied, subtract, custom)
  Param[1]: mode (type: int)
Function 067: RL_EndBlendMode() (0 input parameters)
  Name: RL_EndBlendMode
  Return type: void
  Description: End blending mode (reset to default: alpha blending)
  No input parameters
Function 068: RL_BeginScissorMode() (4 input parameters)
  Name: RL_BeginScissorMode
  Return type: void
  Description: Begin scissor mode (define screen area for following drawing)
  Param[1]: x (type: int)
  Param[2]: y (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 069: RL_EndScissorMode() (0 input parameters)
  Name: RL_EndScissorMode
  Return type: void
  Description: End scissor mode
  No input parameters
Function 070: RL_BeginVrStereoMode() (1 input parameters)
  Name: RL_BeginVrStereoMode
  Return type: void
  Description: Begin stereo rendering (requires VR simulator)
  Param[1]: config (type: RL_VrStereoConfig)
Function 071: RL_EndVrStereoMode() (0 input parameters)
  Name: RL_EndVrStereoMode
  Return type: void
  Description: End stereo rendering (requires VR simulator)
  No input parameters
Function 072: RL_LoadVrStereoConfig() (1 input parameters)
  Name: RL_LoadVrStereoConfig
  Return type: RL_VrStereoConfig
  Description: Load VR stereo config for VR simulator device parameters
  Param[1]: device (type: RL_VrDeviceInfo)
Function 073: RL_UnloadVrStereoConfig() (1 input parameters)
  Name: RL_UnloadVrStereoConfig
  Return type: void
  Description: Unload VR stereo config
  Param[1]: config (type: RL_VrStereoConfig)
Function 074: RL_LoadShader() (2 input parameters)
  Name: RL_LoadShader
  Return type: RL_Shader
  Description: Load shader from files and bind default locations
  Param[1]: vsFileName (type: const char *)
  Param[2]: fsFileName (type: const char *)
Function 075: RL_LoadShaderFromMemory() (2 input parameters)
  Name: RL_LoadShaderFromMemory
  Return type: RL_Shader
  Description: Load shader from code strings and bind default locations
  Param[1]: vsCode (type: const char *)
  Param[2]: fsCode (type: const char *)
Function 076: RL_IsShaderReady() (1 input parameters)
  Name: RL_IsShaderReady
  Return type: bool
  Description: Check if a shader is ready
  Param[1]: shader (type: RL_Shader)
Function 077: RL_GetShaderLocation() (2 input parameters)
  Name: RL_GetShaderLocation
  Return type: int
  Description: Get shader uniform location
  Param[1]: shader (type: RL_Shader)
  Param[2]: uniformName (type: const char *)
Function 078: RL_GetShaderLocationAttrib() (2 input parameters)
  Name: RL_GetShaderLocationAttrib
  Return type: int
  Description: Get shader attribute location
  Param[1]: shader (type: RL_Shader)
  Param[2]: attribName (type: const char *)
Function 079: RL_SetShaderValue() (4 input parameters)
  Name: RL_SetShaderValue
  Return type: void
  Description: Set shader uniform value
  Param[1]: shader (type: RL_Shader)
  Param[2]: locIndex (type: int)
  Param[3]: value (type: const void *)
  Param[4]: uniformType (type: int)
Function 080: RL_SetShaderValueV() (5 input parameters)
  Name: RL_SetShaderValueV
  Return type: void
  Description: Set shader uniform value vector
  Param[1]: shader (type: RL_Shader)
  Param[2]: locIndex (type: int)
  Param[3]: value (type: const void *)
  Param[4]: uniformType (type: int)
  Param[5]: count (type: int)
Function 081: RL_SetShaderValueMatrix() (3 input parameters)
  Name: RL_SetShaderValueMatrix
  Return type: void
  Description: Set shader uniform value (matrix 4x4)
  Param[1]: shader (type: RL_Shader)
  Param[2]: locIndex (type: int)
  Param[3]: mat (type: RL_Matrix)
Function 082: RL_SetShaderValueTexture() (3 input parameters)
  Name: RL_SetShaderValueTexture
  Return type: void
  Description: Set shader uniform value for texture (sampler2d)
  Param[1]: shader (type: RL_Shader)
  Param[2]: locIndex (type: int)
  Param[3]: texture (type: RL_Texture2D)
Function 083: RL_UnloadShader() (1 input parameters)
  Name: RL_UnloadShader
  Return type: void
  Description: Unload shader from GPU memory (VRAM)
  Param[1]: shader (type: RL_Shader)
Function 084: RL_GetScreenToWorldRay() (2 input parameters)
  Name: RL_GetScreenToWorldRay
  Return type: RL_Ray
  Description: Get a ray trace from screen position (i.e mouse)
  Param[1]: position (type: RL_Vector2)
  Param[2]: camera (type: RL_Camera)
Function 085: RL_GetScreenToWorldRayEx() (4 input parameters)
  Name: RL_GetScreenToWorldRayEx
  Return type: RL_Ray
  Description: Get a ray trace from screen position (i.e mouse) in a viewport
  Param[1]: position (type: RL_Vector2)
  Param[2]: camera (type: RL_Camera)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 086: RL_GetWorldToScreen() (2 input parameters)
  Name: RL_GetWorldToScreen
  Return type: RL_Vector2
  Description: Get the screen space position for a 3d world space position
  Param[1]: position (type: RL_Vector3)
  Param[2]: camera (type: RL_Camera)
Function 087: RL_GetWorldToScreenEx() (4 input parameters)
  Name: RL_GetWorldToScreenEx
  Return type: RL_Vector2
  Description: Get size position for a 3d world space position
  Param[1]: position (type: RL_Vector3)
  Param[2]: camera (type: RL_Camera)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
Function 088: RL_GetWorldToScreen2D() (2 input parameters)
  Name: RL_GetWorldToScreen2D
  Return type: RL_Vector2
  Description: Get the screen space position for a 2d camera world space position
  Param[1]: position (type: RL_Vector2)
  Param[2]: camera (type: RL_Camera2D)
Function 089: RL_GetScreenToWorld2D() (2 input parameters)
  Name: RL_GetScreenToWorld2D
  Return type: RL_Vector2
  Description: Get the world space position for a 2d camera screen space position
  Param[1]: position (type: RL_Vector2)
  Param[2]: camera (type: RL_Camera2D)
Function 090: RL_GetCameraMatrix() (1 input parameters)
  Name: RL_GetCameraMatrix
  Return type: RL_Matrix
  Description: Get camera transform matrix (view matrix)
  Param[1]: camera (type: RL_Camera)
Function 091: RL_GetCameraMatrix2D() (1 input parameters)
  Name: RL_GetCameraMatrix2D
  Return type: RL_Matrix
  Description: Get camera 2d transform matrix
  Param[1]: camera (type: RL_Camera2D)
Function 092: RL_SetTargetFPS() (1 input parameters)
  Name: RL_SetTargetFPS
  Return type: void
  Description: Set target FPS (maximum)
  Param[1]: fps (type: int)
Function 093: RL_GetFrameTime() (0 input parameters)
  Name: RL_GetFrameTime
  Return type: float
  Description: Get time in seconds for last frame drawn (delta time)
  No input parameters
Function 094: RL_GetTime() (0 input parameters)
  Name: RL_GetTime
  Return type: double
  Description: Get elapsed time in seconds since RL_InitWindow()
  No input parameters
Function 095: RL_GetFPS() (0 input parameters)
  Name: RL_GetFPS
  Return type: int
  Description: Get current FPS
  No input parameters
Function 096: RL_SwapScreenBuffer() (0 input parameters)
  Name: RL_SwapScreenBuffer
  Return type: void
  Description: Swap back buffer with front buffer (screen drawing)
  No input parameters
Function 097: RL_PollInputEvents() (0 input parameters)
  Name: RL_PollInputEvents
  Return type: void
  Description: Register all input events
  No input parameters
Function 098: RL_WaitTime() (1 input parameters)
  Name: RL_WaitTime
  Return type: void
  Description: Wait for some time (halt program execution)
  Param[1]: seconds (type: double)
Function 099: RL_SetRandomSeed() (1 input parameters)
  Name: RL_SetRandomSeed
  Return type: void
  Description: Set the seed for the random number generator
  Param[1]: seed (type: unsigned int)
Function 100: RL_GetRandomValue() (2 input parameters)
  Name: RL_GetRandomValue
  Return type: int
  Description: Get a random value between min and max (both included)
  Param[1]: min (type: int)
  Param[2]: max (type: int)
Function 101: RL_LoadRandomSequence() (3 input parameters)
  Name: RL_LoadRandomSequence
  Return type: int *
  Description: Load random values sequence, no values repeated
  Param[1]: count (type: unsigned int)
  Param[2]: min (type: int)
  Param[3]: max (type: int)
Function 102: RL_UnloadRandomSequence() (1 input parameters)
  Name: RL_UnloadRandomSequence
  Return type: void
  Description: Unload random values sequence
  Param[1]: sequence (type: int *)
Function 103: RL_TakeScreenshot() (1 input parameters)
  Name: RL_TakeScreenshot
  Return type: void
  Description: Takes a screenshot of current screen (filename extension defines format)
  Param[1]: fileName (type: const char *)
Function 104: RL_SetConfigFlags() (1 input parameters)
  Name: RL_SetConfigFlags
  Return type: void
  Description: Setup init configuration flags (view FLAGS)
  Param[1]: flags (type: unsigned int)
Function 105: RL_OpenURL() (1 input parameters)
  Name: RL_OpenURL
  Return type: void
  Description: Open URL with default system browser (if available)
  Param[1]: url (type: const char *)
Function 106: RL_TraceLog() (3 input parameters)
  Name: RL_TraceLog
  Return type: void
  Description: Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
  Param[1]: logLevel (type: int)
  Param[2]: text (type: const char *)
  Param[3]: args (type: ...)
Function 107: RL_SetTraceLogLevel() (1 input parameters)
  Name: RL_SetTraceLogLevel
  Return type: void
  Description: Set the current threshold (minimum) log level
  Param[1]: logLevel (type: int)
Function 108: RL_MemAlloc() (1 input parameters)
  Name: RL_MemAlloc
  Return type: void *
  Description: Internal memory allocator
  Param[1]: size (type: unsigned int)
Function 109: RL_MemRealloc() (2 input parameters)
  Name: RL_MemRealloc
  Return type: void *
  Description: Internal memory reallocator
  Param[1]: ptr (type: void *)
  Param[2]: size (type: unsigned int)
Function 110: RL_MemFree() (1 input parameters)
  Name: RL_MemFree
  Return type: void
  Description: Internal memory free
  Param[1]: ptr (type: void *)
Function 111: RL_SetTraceLogCallback() (1 input parameters)
  Name: RL_SetTraceLogCallback
  Return type: void
  Description: Set custom trace log
  Param[1]: callback (type: RL_TraceLogCallback)
Function 112: RL_SetLoadFileDataCallback() (1 input parameters)
  Name: RL_SetLoadFileDataCallback
  Return type: void
  Description: Set custom file binary data loader
  Param[1]: callback (type: RL_LoadFileDataCallback)
Function 113: RL_SetSaveFileDataCallback() (1 input parameters)
  Name: RL_SetSaveFileDataCallback
  Return type: void
  Description: Set custom file binary data saver
  Param[1]: callback (type: RL_SaveFileDataCallback)
Function 114: RL_SetLoadFileTextCallback() (1 input parameters)
  Name: RL_SetLoadFileTextCallback
  Return type: void
  Description: Set custom file text data loader
  Param[1]: callback (type: RL_LoadFileTextCallback)
Function 115: RL_SetSaveFileTextCallback() (1 input parameters)
  Name: RL_SetSaveFileTextCallback
  Return type: void
  Description: Set custom file text data saver
  Param[1]: callback (type: RL_SaveFileTextCallback)
Function 116: RL_LoadFileData() (2 input parameters)
  Name: RL_LoadFileData
  Return type: unsigned char *
  Description: Load file data as byte array (read)
  Param[1]: fileName (type: const char *)
  Param[2]: dataSize (type: int *)
Function 117: RL_UnloadFileData() (1 input parameters)
  Name: RL_UnloadFileData
  Return type: void
  Description: Unload file data allocated by RL_LoadFileData()
  Param[1]: data (type: unsigned char *)
Function 118: RL_SaveFileData() (3 input parameters)
  Name: RL_SaveFileData
  Return type: bool
  Description: Save data to file from byte array (write), returns true on success
  Param[1]: fileName (type: const char *)
  Param[2]: data (type: void *)
  Param[3]: dataSize (type: int)
Function 119: RL_ExportDataAsCode() (3 input parameters)
  Name: RL_ExportDataAsCode
  Return type: bool
  Description: Export data to code (.h), returns true on success
  Param[1]: data (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: fileName (type: const char *)
Function 120: RL_LoadFileText() (1 input parameters)
  Name: RL_LoadFileText
  Return type: char *
  Description: Load text data from file (read), returns a '\0' terminated string
  Param[1]: fileName (type: const char *)
Function 121: RL_UnloadFileText() (1 input parameters)
  Name: RL_UnloadFileText
  Return type: void
  Description: Unload file text data allocated by RL_LoadFileText()
  Param[1]: text (type: char *)
Function 122: RL_SaveFileText() (2 input parameters)
  Name: RL_SaveFileText
  Return type: bool
  Description: Save text data to file (write), string must be '\0' terminated, returns true on success
  Param[1]: fileName (type: const char *)
  Param[2]: text (type: char *)
Function 123: RL_FileExists() (1 input parameters)
  Name: RL_FileExists
  Return type: bool
  Description: Check if file exists
  Param[1]: fileName (type: const char *)
Function 124: RL_DirectoryExists() (1 input parameters)
  Name: RL_DirectoryExists
  Return type: bool
  Description: Check if a directory path exists
  Param[1]: dirPath (type: const char *)
Function 125: RL_IsFileExtension() (2 input parameters)
  Name: RL_IsFileExtension
  Return type: bool
  Description: Check file extension (including point: .png, .wav)
  Param[1]: fileName (type: const char *)
  Param[2]: ext (type: const char *)
Function 126: RL_GetFileLength() (1 input parameters)
  Name: RL_GetFileLength
  Return type: int
  Description: Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
  Param[1]: fileName (type: const char *)
Function 127: RL_GetFileExtension() (1 input parameters)
  Name: RL_GetFileExtension
  Return type: const char *
  Description: Get pointer to extension for a filename string (includes dot: '.png')
  Param[1]: fileName (type: const char *)
Function 128: RL_GetFileName() (1 input parameters)
  Name: RL_GetFileName
  Return type: const char *
  Description: Get pointer to filename for a path string
  Param[1]: filePath (type: const char *)
Function 129: RL_GetFileNameWithoutExt() (1 input parameters)
  Name: RL_GetFileNameWithoutExt
  Return type: const char *
  Description: Get filename string without extension (uses static string)
  Param[1]: filePath (type: const char *)
Function 130: RL_GetDirectoryPath() (1 input parameters)
  Name: RL_GetDirectoryPath
  Return type: const char *
  Description: Get full path for a given fileName with path (uses static string)
  Param[1]: filePath (type: const char *)
Function 131: RL_GetPrevDirectoryPath() (1 input parameters)
  Name: RL_GetPrevDirectoryPath
  Return type: const char *
  Description: Get previous directory path for a given path (uses static string)
  Param[1]: dirPath (type: const char *)
Function 132: RL_GetWorkingDirectory() (0 input parameters)
  Name: RL_GetWorkingDirectory
  Return type: const char *
  Description: Get current working directory (uses static string)
  No input parameters
Function 133: RL_GetApplicationDirectory() (0 input parameters)
  Name: RL_GetApplicationDirectory
  Return type: const char *
  Description: Get the directory of the running application (uses static string)
  No input parameters
Function 134: MakeDirectory() (1 input parameters)
  Name: MakeDirectory
  Return type: int
  Description: Create directories (including full path requested), returns 0 on success
  Param[1]: dirPath (type: const char *)
Function 135: RL_ChangeDirectory() (1 input parameters)
  Name: RL_ChangeDirectory
  Return type: bool
  Description: Change working directory, return true on success
  Param[1]: dir (type: const char *)
Function 136: RL_IsPathFile() (1 input parameters)
  Name: RL_IsPathFile
  Return type: bool
  Description: Check if a given path is a file or a directory
  Param[1]: path (type: const char *)
Function 137: RL_IsFileNameValid() (1 input parameters)
  Name: RL_IsFileNameValid
  Return type: bool
  Description: Check if fileName is valid for the platform/OS
  Param[1]: fileName (type: const char *)
Function 138: RL_LoadDirectoryFiles() (1 input parameters)
  Name: RL_LoadDirectoryFiles
  Return type: RL_FilePathList
  Description: Load directory filepaths
  Param[1]: dirPath (type: const char *)
Function 139: RL_LoadDirectoryFilesEx() (3 input parameters)
  Name: RL_LoadDirectoryFilesEx
  Return type: RL_FilePathList
  Description: Load directory filepaths with extension filtering and recursive directory scan. Use 'DIR' in the filter string to include directories in the result
  Param[1]: basePath (type: const char *)
  Param[2]: filter (type: const char *)
  Param[3]: scanSubdirs (type: bool)
Function 140: RL_UnloadDirectoryFiles() (1 input parameters)
  Name: RL_UnloadDirectoryFiles
  Return type: void
  Description: Unload filepaths
  Param[1]: files (type: RL_FilePathList)
Function 141: RL_IsFileDropped() (0 input parameters)
  Name: RL_IsFileDropped
  Return type: bool
  Description: Check if a file has been dropped into window
  No input parameters
Function 142: RL_LoadDroppedFiles() (0 input parameters)
  Name: RL_LoadDroppedFiles
  Return type: RL_FilePathList
  Description: Load dropped filepaths
  No input parameters
Function 143: RL_UnloadDroppedFiles() (1 input parameters)
  Name: RL_UnloadDroppedFiles
  Return type: void
  Description: Unload dropped filepaths
  Param[1]: files (type: RL_FilePathList)
Function 144: RL_GetFileModTime() (1 input parameters)
  Name: RL_GetFileModTime
  Return type: long
  Description: Get file modification time (last write time)
  Param[1]: fileName (type: const char *)
Function 145: RL_CompressData() (3 input parameters)
  Name: RL_CompressData
  Return type: unsigned char *
  Description: Compress data (DEFLATE algorithm), memory must be RL_MemFree()
  Param[1]: data (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: compDataSize (type: int *)
Function 146: RL_DecompressData() (3 input parameters)
  Name: RL_DecompressData
  Return type: unsigned char *
  Description: Decompress data (DEFLATE algorithm), memory must be RL_MemFree()
  Param[1]: compData (type: const unsigned char *)
  Param[2]: compDataSize (type: int)
  Param[3]: dataSize (type: int *)
Function 147: RL_EncodeDataBase64() (3 input parameters)
  Name: RL_EncodeDataBase64
  Return type: char *
  Description: Encode data to Base64 string, memory must be RL_MemFree()
  Param[1]: data (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: outputSize (type: int *)
Function 148: RL_DecodeDataBase64() (2 input parameters)
  Name: RL_DecodeDataBase64
  Return type: unsigned char *
  Description: Decode Base64 string data, memory must be RL_MemFree()
  Param[1]: data (type: const unsigned char *)
  Param[2]: outputSize (type: int *)
Function 149: RL_LoadAutomationEventList() (1 input parameters)
  Name: RL_LoadAutomationEventList
  Return type: RL_AutomationEventList
  Description: Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
  Param[1]: fileName (type: const char *)
Function 150: RL_UnloadAutomationEventList() (1 input parameters)
  Name: RL_UnloadAutomationEventList
  Return type: void
  Description: Unload automation events list from file
  Param[1]: list (type: RL_AutomationEventList)
Function 151: RL_ExportAutomationEventList() (2 input parameters)
  Name: RL_ExportAutomationEventList
  Return type: bool
  Description: Export automation events list as text file
  Param[1]: list (type: RL_AutomationEventList)
  Param[2]: fileName (type: const char *)
Function 152: RL_SetAutomationEventList() (1 input parameters)
  Name: RL_SetAutomationEventList
  Return type: void
  Description: Set automation event list to record to
  Param[1]: list (type: RL_AutomationEventList *)
Function 153: RL_SetAutomationEventBaseFrame() (1 input parameters)
  Name: RL_SetAutomationEventBaseFrame
  Return type: void
  Description: Set automation event internal base frame to start recording
  Param[1]: frame (type: int)
Function 154: RL_StartAutomationEventRecording() (0 input parameters)
  Name: RL_StartAutomationEventRecording
  Return type: void
  Description: Start recording automation events (RL_AutomationEventList must be set)
  No input parameters
Function 155: RL_StopAutomationEventRecording() (0 input parameters)
  Name: RL_StopAutomationEventRecording
  Return type: void
  Description: Stop recording automation events
  No input parameters
Function 156: RL_PlayAutomationEvent() (1 input parameters)
  Name: RL_PlayAutomationEvent
  Return type: void
  Description: Play a recorded automation event
  Param[1]: event (type: RL_AutomationEvent)
Function 157: RL_IsKeyPressed() (1 input parameters)
  Name: RL_IsKeyPressed
  Return type: bool
  Description: Check if a key has been pressed once
  Param[1]: key (type: int)
Function 158: RL_IsKeyPressedRepeat() (1 input parameters)
  Name: RL_IsKeyPressedRepeat
  Return type: bool
  Description: Check if a key has been pressed again (Only PLATFORM_DESKTOP)
  Param[1]: key (type: int)
Function 159: RL_IsKeyDown() (1 input parameters)
  Name: RL_IsKeyDown
  Return type: bool
  Description: Check if a key is being pressed
  Param[1]: key (type: int)
Function 160: RL_IsKeyReleased() (1 input parameters)
  Name: RL_IsKeyReleased
  Return type: bool
  Description: Check if a key has been released once
  Param[1]: key (type: int)
Function 161: RL_IsKeyUp() (1 input parameters)
  Name: RL_IsKeyUp
  Return type: bool
  Description: Check if a key is NOT being pressed
  Param[1]: key (type: int)
Function 162: RL_GetKeyPressed() (0 input parameters)
  Name: RL_GetKeyPressed
  Return type: int
  Description: Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
  No input parameters
Function 163: RL_GetCharPressed() (0 input parameters)
  Name: RL_GetCharPressed
  Return type: int
  Description: Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
  No input parameters
Function 164: RL_SetExitKey() (1 input parameters)
  Name: RL_SetExitKey
  Return type: void
  Description: Set a custom key to exit program (default is ESC)
  Param[1]: key (type: int)
Function 165: RL_IsGamepadAvailable() (1 input parameters)
  Name: RL_IsGamepadAvailable
  Return type: bool
  Description: Check if a gamepad is available
  Param[1]: gamepad (type: int)
Function 166: RL_GetGamepadName() (1 input parameters)
  Name: RL_GetGamepadName
  Return type: const char *
  Description: Get gamepad internal name id
  Param[1]: gamepad (type: int)
Function 167: RL_IsGamepadButtonPressed() (2 input parameters)
  Name: RL_IsGamepadButtonPressed
  Return type: bool
  Description: Check if a gamepad button has been pressed once
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 168: RL_IsGamepadButtonDown() (2 input parameters)
  Name: RL_IsGamepadButtonDown
  Return type: bool
  Description: Check if a gamepad button is being pressed
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 169: RL_IsGamepadButtonReleased() (2 input parameters)
  Name: RL_IsGamepadButtonReleased
  Return type: bool
  Description: Check if a gamepad button has been released once
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 170: RL_IsGamepadButtonUp() (2 input parameters)
  Name: RL_IsGamepadButtonUp
  Return type: bool
  Description: Check if a gamepad button is NOT being pressed
  Param[1]: gamepad (type: int)
  Param[2]: button (type: int)
Function 171: RL_GetGamepadButtonPressed() (0 input parameters)
  Name: RL_GetGamepadButtonPressed
  Return type: int
  Description: Get the last gamepad button pressed
  No input parameters
Function 172: RL_GetGamepadAxisCount() (1 input parameters)
  Name: RL_GetGamepadAxisCount
  Return type: int
  Description: Get gamepad axis count for a gamepad
  Param[1]: gamepad (type: int)
Function 173: RL_GetGamepadAxisMovement() (2 input parameters)
  Name: RL_GetGamepadAxisMovement
  Return type: float
  Description: Get axis movement value for a gamepad axis
  Param[1]: gamepad (type: int)
  Param[2]: axis (type: int)
Function 174: RL_SetGamepadMappings() (1 input parameters)
  Name: RL_SetGamepadMappings
  Return type: int
  Description: Set internal gamepad mappings (SDL_GameControllerDB)
  Param[1]: mappings (type: const char *)
Function 175: RL_SetGamepadVibration() (3 input parameters)
  Name: RL_SetGamepadVibration
  Return type: void
  Description: Set gamepad vibration for both motors
  Param[1]: gamepad (type: int)
  Param[2]: leftMotor (type: float)
  Param[3]: rightMotor (type: float)
Function 176: RL_IsMouseButtonPressed() (1 input parameters)
  Name: RL_IsMouseButtonPressed
  Return type: bool
  Description: Check if a mouse button has been pressed once
  Param[1]: button (type: int)
Function 177: RL_IsMouseButtonDown() (1 input parameters)
  Name: RL_IsMouseButtonDown
  Return type: bool
  Description: Check if a mouse button is being pressed
  Param[1]: button (type: int)
Function 178: RL_IsMouseButtonReleased() (1 input parameters)
  Name: RL_IsMouseButtonReleased
  Return type: bool
  Description: Check if a mouse button has been released once
  Param[1]: button (type: int)
Function 179: RL_IsMouseButtonUp() (1 input parameters)
  Name: RL_IsMouseButtonUp
  Return type: bool
  Description: Check if a mouse button is NOT being pressed
  Param[1]: button (type: int)
Function 180: RL_GetMouseX() (0 input parameters)
  Name: RL_GetMouseX
  Return type: int
  Description: Get mouse position X
  No input parameters
Function 181: RL_GetMouseY() (0 input parameters)
  Name: RL_GetMouseY
  Return type: int
  Description: Get mouse position Y
  No input parameters
Function 182: RL_GetMousePosition() (0 input parameters)
  Name: RL_GetMousePosition
  Return type: RL_Vector2
  Description: Get mouse position XY
  No input parameters
Function 183: RL_GetMouseDelta() (0 input parameters)
  Name: RL_GetMouseDelta
  Return type: RL_Vector2
  Description: Get mouse delta between frames
  No input parameters
Function 184: RL_SetMousePosition() (2 input parameters)
  Name: RL_SetMousePosition
  Return type: void
  Description: Set mouse position XY
  Param[1]: x (type: int)
  Param[2]: y (type: int)
Function 185: RL_SetMouseOffset() (2 input parameters)
  Name: RL_SetMouseOffset
  Return type: void
  Description: Set mouse offset
  Param[1]: offsetX (type: int)
  Param[2]: offsetY (type: int)
Function 186: RL_SetMouseScale() (2 input parameters)
  Name: RL_SetMouseScale
  Return type: void
  Description: Set mouse scaling
  Param[1]: scaleX (type: float)
  Param[2]: scaleY (type: float)
Function 187: RL_GetMouseWheelMove() (0 input parameters)
  Name: RL_GetMouseWheelMove
  Return type: float
  Description: Get mouse wheel movement for X or Y, whichever is larger
  No input parameters
Function 188: RL_GetMouseWheelMoveV() (0 input parameters)
  Name: RL_GetMouseWheelMoveV
  Return type: RL_Vector2
  Description: Get mouse wheel movement for both X and Y
  No input parameters
Function 189: RL_SetMouseCursor() (1 input parameters)
  Name: RL_SetMouseCursor
  Return type: void
  Description: Set mouse cursor
  Param[1]: cursor (type: int)
Function 190: RL_GetTouchX() (0 input parameters)
  Name: RL_GetTouchX
  Return type: int
  Description: Get touch position X for touch point 0 (relative to screen size)
  No input parameters
Function 191: RL_GetTouchY() (0 input parameters)
  Name: RL_GetTouchY
  Return type: int
  Description: Get touch position Y for touch point 0 (relative to screen size)
  No input parameters
Function 192: RL_GetTouchPosition() (1 input parameters)
  Name: RL_GetTouchPosition
  Return type: RL_Vector2
  Description: Get touch position XY for a touch point index (relative to screen size)
  Param[1]: index (type: int)
Function 193: RL_GetTouchPointId() (1 input parameters)
  Name: RL_GetTouchPointId
  Return type: int
  Description: Get touch point identifier for given index
  Param[1]: index (type: int)
Function 194: RL_GetTouchPointCount() (0 input parameters)
  Name: RL_GetTouchPointCount
  Return type: int
  Description: Get number of touch points
  No input parameters
Function 195: RL_SetGesturesEnabled() (1 input parameters)
  Name: RL_SetGesturesEnabled
  Return type: void
  Description: Enable a set of gestures using flags
  Param[1]: flags (type: unsigned int)
Function 196: RL_IsGestureDetected() (1 input parameters)
  Name: RL_IsGestureDetected
  Return type: bool
  Description: Check if a gesture have been detected
  Param[1]: gesture (type: unsigned int)
Function 197: RL_GetGestureDetected() (0 input parameters)
  Name: RL_GetGestureDetected
  Return type: int
  Description: Get latest detected gesture
  No input parameters
Function 198: RL_GetGestureHoldDuration() (0 input parameters)
  Name: RL_GetGestureHoldDuration
  Return type: float
  Description: Get gesture hold time in milliseconds
  No input parameters
Function 199: RL_GetGestureDragVector() (0 input parameters)
  Name: RL_GetGestureDragVector
  Return type: RL_Vector2
  Description: Get gesture drag vector
  No input parameters
Function 200: RL_GetGestureDragAngle() (0 input parameters)
  Name: RL_GetGestureDragAngle
  Return type: float
  Description: Get gesture drag angle
  No input parameters
Function 201: RL_GetGesturePinchVector() (0 input parameters)
  Name: RL_GetGesturePinchVector
  Return type: RL_Vector2
  Description: Get gesture pinch delta
  No input parameters
Function 202: RL_GetGesturePinchAngle() (0 input parameters)
  Name: RL_GetGesturePinchAngle
  Return type: float
  Description: Get gesture pinch angle
  No input parameters
Function 203: RL_UpdateCamera() (2 input parameters)
  Name: RL_UpdateCamera
  Return type: void
  Description: Update camera position for selected mode
  Param[1]: camera (type: RL_Camera *)
  Param[2]: mode (type: int)
Function 204: RL_UpdateCameraPro() (4 input parameters)
  Name: RL_UpdateCameraPro
  Return type: void
  Description: Update camera movement/rotation
  Param[1]: camera (type: RL_Camera *)
  Param[2]: movement (type: RL_Vector3)
  Param[3]: rotation (type: RL_Vector3)
  Param[4]: zoom (type: float)
Function 205: RL_SetShapesTexture() (2 input parameters)
  Name: RL_SetShapesTexture
  Return type: void
  Description: Set texture and rectangle to be used on shapes drawing
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: source (type: RL_Rectangle)
Function 206: RL_GetShapesTexture() (0 input parameters)
  Name: RL_GetShapesTexture
  Return type: RL_Texture2D
  Description: Get texture that is used for shapes drawing
  No input parameters
Function 207: RL_GetShapesTextureRectangle() (0 input parameters)
  Name: RL_GetShapesTextureRectangle
  Return type: RL_Rectangle
  Description: Get texture source rectangle that is used for shapes drawing
  No input parameters
Function 208: RL_DrawPixel() (3 input parameters)
  Name: RL_DrawPixel
  Return type: void
  Description: Draw a pixel using geometry [Can be slow, use with care]
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: color (type: RL_Color)
Function 209: RL_DrawPixelV() (2 input parameters)
  Name: RL_DrawPixelV
  Return type: void
  Description: Draw a pixel using geometry (Vector version) [Can be slow, use with care]
  Param[1]: position (type: RL_Vector2)
  Param[2]: color (type: RL_Color)
Function 210: RL_DrawLine() (5 input parameters)
  Name: RL_DrawLine
  Return type: void
  Description: Draw a line
  Param[1]: startPosX (type: int)
  Param[2]: startPosY (type: int)
  Param[3]: endPosX (type: int)
  Param[4]: endPosY (type: int)
  Param[5]: color (type: RL_Color)
Function 211: RL_DrawLineV() (3 input parameters)
  Name: RL_DrawLineV
  Return type: void
  Description: Draw a line (using gl lines)
  Param[1]: startPos (type: RL_Vector2)
  Param[2]: endPos (type: RL_Vector2)
  Param[3]: color (type: RL_Color)
Function 212: RL_DrawLineEx() (4 input parameters)
  Name: RL_DrawLineEx
  Return type: void
  Description: Draw a line (using triangles/quads)
  Param[1]: startPos (type: RL_Vector2)
  Param[2]: endPos (type: RL_Vector2)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 213: RL_DrawLineStrip() (3 input parameters)
  Name: RL_DrawLineStrip
  Return type: void
  Description: Draw lines sequence (using gl lines)
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: RL_Color)
Function 214: RL_DrawLineBezier() (4 input parameters)
  Name: RL_DrawLineBezier
  Return type: void
  Description: Draw line segment cubic-bezier in-out interpolation
  Param[1]: startPos (type: RL_Vector2)
  Param[2]: endPos (type: RL_Vector2)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 215: RL_DrawCircle() (4 input parameters)
  Name: RL_DrawCircle
  Return type: void
  Description: Draw a color-filled circle
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radius (type: float)
  Param[4]: color (type: RL_Color)
Function 216: RL_DrawCircleSector() (6 input parameters)
  Name: RL_DrawCircleSector
  Return type: void
  Description: Draw a piece of a circle
  Param[1]: center (type: RL_Vector2)
  Param[2]: radius (type: float)
  Param[3]: startAngle (type: float)
  Param[4]: endAngle (type: float)
  Param[5]: segments (type: int)
  Param[6]: color (type: RL_Color)
Function 217: RL_DrawCircleSectorLines() (6 input parameters)
  Name: RL_DrawCircleSectorLines
  Return type: void
  Description: Draw circle sector outline
  Param[1]: center (type: RL_Vector2)
  Param[2]: radius (type: float)
  Param[3]: startAngle (type: float)
  Param[4]: endAngle (type: float)
  Param[5]: segments (type: int)
  Param[6]: color (type: RL_Color)
Function 218: RL_DrawCircleGradient() (5 input parameters)
  Name: RL_DrawCircleGradient
  Return type: void
  Description: Draw a gradient-filled circle
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radius (type: float)
  Param[4]: inner (type: RL_Color)
  Param[5]: outer (type: RL_Color)
Function 219: RL_DrawCircleV() (3 input parameters)
  Name: RL_DrawCircleV
  Return type: void
  Description: Draw a color-filled circle (Vector version)
  Param[1]: center (type: RL_Vector2)
  Param[2]: radius (type: float)
  Param[3]: color (type: RL_Color)
Function 220: RL_DrawCircleLines() (4 input parameters)
  Name: RL_DrawCircleLines
  Return type: void
  Description: Draw circle outline
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radius (type: float)
  Param[4]: color (type: RL_Color)
Function 221: RL_DrawCircleLinesV() (3 input parameters)
  Name: RL_DrawCircleLinesV
  Return type: void
  Description: Draw circle outline (Vector version)
  Param[1]: center (type: RL_Vector2)
  Param[2]: radius (type: float)
  Param[3]: color (type: RL_Color)
Function 222: RL_DrawEllipse() (5 input parameters)
  Name: RL_DrawEllipse
  Return type: void
  Description: Draw ellipse
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radiusH (type: float)
  Param[4]: radiusV (type: float)
  Param[5]: color (type: RL_Color)
Function 223: RL_DrawEllipseLines() (5 input parameters)
  Name: RL_DrawEllipseLines
  Return type: void
  Description: Draw ellipse outline
  Param[1]: centerX (type: int)
  Param[2]: centerY (type: int)
  Param[3]: radiusH (type: float)
  Param[4]: radiusV (type: float)
  Param[5]: color (type: RL_Color)
Function 224: RL_DrawRing() (7 input parameters)
  Name: RL_DrawRing
  Return type: void
  Description: Draw ring
  Param[1]: center (type: RL_Vector2)
  Param[2]: innerRadius (type: float)
  Param[3]: outerRadius (type: float)
  Param[4]: startAngle (type: float)
  Param[5]: endAngle (type: float)
  Param[6]: segments (type: int)
  Param[7]: color (type: RL_Color)
Function 225: RL_DrawRingLines() (7 input parameters)
  Name: RL_DrawRingLines
  Return type: void
  Description: Draw ring outline
  Param[1]: center (type: RL_Vector2)
  Param[2]: innerRadius (type: float)
  Param[3]: outerRadius (type: float)
  Param[4]: startAngle (type: float)
  Param[5]: endAngle (type: float)
  Param[6]: segments (type: int)
  Param[7]: color (type: RL_Color)
Function 226: RL_DrawRectangle() (5 input parameters)
  Name: RL_DrawRectangle
  Return type: void
  Description: Draw a color-filled rectangle
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: color (type: RL_Color)
Function 227: RL_DrawRectangleV() (3 input parameters)
  Name: RL_DrawRectangleV
  Return type: void
  Description: Draw a color-filled rectangle (Vector version)
  Param[1]: position (type: RL_Vector2)
  Param[2]: size (type: RL_Vector2)
  Param[3]: color (type: RL_Color)
Function 228: RL_DrawRectangleRec() (2 input parameters)
  Name: RL_DrawRectangleRec
  Return type: void
  Description: Draw a color-filled rectangle
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: color (type: RL_Color)
Function 229: RL_DrawRectanglePro() (4 input parameters)
  Name: RL_DrawRectanglePro
  Return type: void
  Description: Draw a color-filled rectangle with pro parameters
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: origin (type: RL_Vector2)
  Param[3]: rotation (type: float)
  Param[4]: color (type: RL_Color)
Function 230: RL_DrawRectangleGradientV() (6 input parameters)
  Name: RL_DrawRectangleGradientV
  Return type: void
  Description: Draw a vertical-gradient-filled rectangle
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: top (type: RL_Color)
  Param[6]: bottom (type: RL_Color)
Function 231: RL_DrawRectangleGradientH() (6 input parameters)
  Name: RL_DrawRectangleGradientH
  Return type: void
  Description: Draw a horizontal-gradient-filled rectangle
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: left (type: RL_Color)
  Param[6]: right (type: RL_Color)
Function 232: RL_DrawRectangleGradientEx() (5 input parameters)
  Name: RL_DrawRectangleGradientEx
  Return type: void
  Description: Draw a gradient-filled rectangle with custom vertex colors
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: topLeft (type: RL_Color)
  Param[3]: bottomLeft (type: RL_Color)
  Param[4]: topRight (type: RL_Color)
  Param[5]: bottomRight (type: RL_Color)
Function 233: RL_DrawRectangleLines() (5 input parameters)
  Name: RL_DrawRectangleLines
  Return type: void
  Description: Draw rectangle outline
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
  Param[3]: width (type: int)
  Param[4]: height (type: int)
  Param[5]: color (type: RL_Color)
Function 234: RL_DrawRectangleLinesEx() (3 input parameters)
  Name: RL_DrawRectangleLinesEx
  Return type: void
  Description: Draw rectangle outline with extended parameters
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: lineThick (type: float)
  Param[3]: color (type: RL_Color)
Function 235: RL_DrawRectangleRounded() (4 input parameters)
  Name: RL_DrawRectangleRounded
  Return type: void
  Description: Draw rectangle with rounded edges
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: roundness (type: float)
  Param[3]: segments (type: int)
  Param[4]: color (type: RL_Color)
Function 236: RL_DrawRectangleRoundedLines() (4 input parameters)
  Name: RL_DrawRectangleRoundedLines
  Return type: void
  Description: Draw rectangle lines with rounded edges
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: roundness (type: float)
  Param[3]: segments (type: int)
  Param[4]: color (type: RL_Color)
Function 237: RL_DrawRectangleRoundedLinesEx() (5 input parameters)
  Name: RL_DrawRectangleRoundedLinesEx
  Return type: void
  Description: Draw rectangle with rounded edges outline
  Param[1]: rec (type: RL_Rectangle)
  Param[2]: roundness (type: float)
  Param[3]: segments (type: int)
  Param[4]: lineThick (type: float)
  Param[5]: color (type: RL_Color)
Function 238: RL_DrawTriangle() (4 input parameters)
  Name: RL_DrawTriangle
  Return type: void
  Description: Draw a color-filled triangle (vertex in counter-clockwise order!)
  Param[1]: v1 (type: RL_Vector2)
  Param[2]: v2 (type: RL_Vector2)
  Param[3]: v3 (type: RL_Vector2)
  Param[4]: color (type: RL_Color)
Function 239: RL_DrawTriangleLines() (4 input parameters)
  Name: RL_DrawTriangleLines
  Return type: void
  Description: Draw triangle outline (vertex in counter-clockwise order!)
  Param[1]: v1 (type: RL_Vector2)
  Param[2]: v2 (type: RL_Vector2)
  Param[3]: v3 (type: RL_Vector2)
  Param[4]: color (type: RL_Color)
Function 240: RL_DrawTriangleFan() (3 input parameters)
  Name: RL_DrawTriangleFan
  Return type: void
  Description: Draw a triangle fan defined by points (first vertex is the center)
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: RL_Color)
Function 241: RL_DrawTriangleStrip() (3 input parameters)
  Name: RL_DrawTriangleStrip
  Return type: void
  Description: Draw a triangle strip defined by points
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: RL_Color)
Function 242: RL_DrawPoly() (5 input parameters)
  Name: RL_DrawPoly
  Return type: void
  Description: Draw a regular polygon (Vector version)
  Param[1]: center (type: RL_Vector2)
  Param[2]: sides (type: int)
  Param[3]: radius (type: float)
  Param[4]: rotation (type: float)
  Param[5]: color (type: RL_Color)
Function 243: RL_DrawPolyLines() (5 input parameters)
  Name: RL_DrawPolyLines
  Return type: void
  Description: Draw a polygon outline of n sides
  Param[1]: center (type: RL_Vector2)
  Param[2]: sides (type: int)
  Param[3]: radius (type: float)
  Param[4]: rotation (type: float)
  Param[5]: color (type: RL_Color)
Function 244: RL_DrawPolyLinesEx() (6 input parameters)
  Name: RL_DrawPolyLinesEx
  Return type: void
  Description: Draw a polygon outline of n sides with extended parameters
  Param[1]: center (type: RL_Vector2)
  Param[2]: sides (type: int)
  Param[3]: radius (type: float)
  Param[4]: rotation (type: float)
  Param[5]: lineThick (type: float)
  Param[6]: color (type: RL_Color)
Function 245: RL_DrawSplineLinear() (4 input parameters)
  Name: RL_DrawSplineLinear
  Return type: void
  Description: Draw spline: Linear, minimum 2 points
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 246: RL_DrawSplineBasis() (4 input parameters)
  Name: RL_DrawSplineBasis
  Return type: void
  Description: Draw spline: B-Spline, minimum 4 points
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 247: RL_DrawSplineCatmullRom() (4 input parameters)
  Name: RL_DrawSplineCatmullRom
  Return type: void
  Description: Draw spline: Catmull-Rom, minimum 4 points
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 248: RL_DrawSplineBezierQuadratic() (4 input parameters)
  Name: RL_DrawSplineBezierQuadratic
  Return type: void
  Description: Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 249: RL_DrawSplineBezierCubic() (4 input parameters)
  Name: RL_DrawSplineBezierCubic
  Return type: void
  Description: Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
  Param[1]: points (type: const RL_Vector2 *)
  Param[2]: pointCount (type: int)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 250: RL_DrawSplineSegmentLinear() (4 input parameters)
  Name: RL_DrawSplineSegmentLinear
  Return type: void
  Description: Draw spline segment: Linear, 2 points
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: p2 (type: RL_Vector2)
  Param[3]: thick (type: float)
  Param[4]: color (type: RL_Color)
Function 251: RL_DrawSplineSegmentBasis() (6 input parameters)
  Name: RL_DrawSplineSegmentBasis
  Return type: void
  Description: Draw spline segment: B-Spline, 4 points
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: p2 (type: RL_Vector2)
  Param[3]: p3 (type: RL_Vector2)
  Param[4]: p4 (type: RL_Vector2)
  Param[5]: thick (type: float)
  Param[6]: color (type: RL_Color)
Function 252: RL_DrawSplineSegmentCatmullRom() (6 input parameters)
  Name: RL_DrawSplineSegmentCatmullRom
  Return type: void
  Description: Draw spline segment: Catmull-Rom, 4 points
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: p2 (type: RL_Vector2)
  Param[3]: p3 (type: RL_Vector2)
  Param[4]: p4 (type: RL_Vector2)
  Param[5]: thick (type: float)
  Param[6]: color (type: RL_Color)
Function 253: RL_DrawSplineSegmentBezierQuadratic() (5 input parameters)
  Name: RL_DrawSplineSegmentBezierQuadratic
  Return type: void
  Description: Draw spline segment: Quadratic Bezier, 2 points, 1 control point
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: c2 (type: RL_Vector2)
  Param[3]: p3 (type: RL_Vector2)
  Param[4]: thick (type: float)
  Param[5]: color (type: RL_Color)
Function 254: RL_DrawSplineSegmentBezierCubic() (6 input parameters)
  Name: RL_DrawSplineSegmentBezierCubic
  Return type: void
  Description: Draw spline segment: Cubic Bezier, 2 points, 2 control points
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: c2 (type: RL_Vector2)
  Param[3]: c3 (type: RL_Vector2)
  Param[4]: p4 (type: RL_Vector2)
  Param[5]: thick (type: float)
  Param[6]: color (type: RL_Color)
Function 255: RL_GetSplinePointLinear() (3 input parameters)
  Name: RL_GetSplinePointLinear
  Return type: RL_Vector2
  Description: Get (evaluate) spline point: Linear
  Param[1]: startPos (type: RL_Vector2)
  Param[2]: endPos (type: RL_Vector2)
  Param[3]: t (type: float)
Function 256: RL_GetSplinePointBasis() (5 input parameters)
  Name: RL_GetSplinePointBasis
  Return type: RL_Vector2
  Description: Get (evaluate) spline point: B-Spline
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: p2 (type: RL_Vector2)
  Param[3]: p3 (type: RL_Vector2)
  Param[4]: p4 (type: RL_Vector2)
  Param[5]: t (type: float)
Function 257: RL_GetSplinePointCatmullRom() (5 input parameters)
  Name: RL_GetSplinePointCatmullRom
  Return type: RL_Vector2
  Description: Get (evaluate) spline point: Catmull-Rom
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: p2 (type: RL_Vector2)
  Param[3]: p3 (type: RL_Vector2)
  Param[4]: p4 (type: RL_Vector2)
  Param[5]: t (type: float)
Function 258: RL_GetSplinePointBezierQuad() (4 input parameters)
  Name: RL_GetSplinePointBezierQuad
  Return type: RL_Vector2
  Description: Get (evaluate) spline point: Quadratic Bezier
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: c2 (type: RL_Vector2)
  Param[3]: p3 (type: RL_Vector2)
  Param[4]: t (type: float)
Function 259: RL_GetSplinePointBezierCubic() (5 input parameters)
  Name: RL_GetSplinePointBezierCubic
  Return type: RL_Vector2
  Description: Get (evaluate) spline point: Cubic Bezier
  Param[1]: p1 (type: RL_Vector2)
  Param[2]: c2 (type: RL_Vector2)
  Param[3]: c3 (type: RL_Vector2)
  Param[4]: p4 (type: RL_Vector2)
  Param[5]: t (type: float)
Function 260: RL_CheckCollisionRecs() (2 input parameters)
  Name: RL_CheckCollisionRecs
  Return type: bool
  Description: Check collision between two rectangles
  Param[1]: rec1 (type: RL_Rectangle)
  Param[2]: rec2 (type: RL_Rectangle)
Function 261: RL_CheckCollisionCircles() (4 input parameters)
  Name: RL_CheckCollisionCircles
  Return type: bool
  Description: Check collision between two circles
  Param[1]: center1 (type: RL_Vector2)
  Param[2]: radius1 (type: float)
  Param[3]: center2 (type: RL_Vector2)
  Param[4]: radius2 (type: float)
Function 262: RL_CheckCollisionCircleRec() (3 input parameters)
  Name: RL_CheckCollisionCircleRec
  Return type: bool
  Description: Check collision between circle and rectangle
  Param[1]: center (type: RL_Vector2)
  Param[2]: radius (type: float)
  Param[3]: rec (type: RL_Rectangle)
Function 263: RL_CheckCollisionPointRec() (2 input parameters)
  Name: RL_CheckCollisionPointRec
  Return type: bool
  Description: Check if point is inside rectangle
  Param[1]: point (type: RL_Vector2)
  Param[2]: rec (type: RL_Rectangle)
Function 264: RL_CheckCollisionPointCircle() (3 input parameters)
  Name: RL_CheckCollisionPointCircle
  Return type: bool
  Description: Check if point is inside circle
  Param[1]: point (type: RL_Vector2)
  Param[2]: center (type: RL_Vector2)
  Param[3]: radius (type: float)
Function 265: RL_CheckCollisionPointTriangle() (4 input parameters)
  Name: RL_CheckCollisionPointTriangle
  Return type: bool
  Description: Check if point is inside a triangle
  Param[1]: point (type: RL_Vector2)
  Param[2]: p1 (type: RL_Vector2)
  Param[3]: p2 (type: RL_Vector2)
  Param[4]: p3 (type: RL_Vector2)
Function 266: RL_CheckCollisionPointPoly() (3 input parameters)
  Name: RL_CheckCollisionPointPoly
  Return type: bool
  Description: Check if point is within a polygon described by array of vertices
  Param[1]: point (type: RL_Vector2)
  Param[2]: points (type: const RL_Vector2 *)
  Param[3]: pointCount (type: int)
Function 267: RL_CheckCollisionLines() (5 input parameters)
  Name: RL_CheckCollisionLines
  Return type: bool
  Description: Check the collision between two lines defined by two points each, returns collision point by reference
  Param[1]: startPos1 (type: RL_Vector2)
  Param[2]: endPos1 (type: RL_Vector2)
  Param[3]: startPos2 (type: RL_Vector2)
  Param[4]: endPos2 (type: RL_Vector2)
  Param[5]: collisionPoint (type: RL_Vector2 *)
Function 268: RL_CheckCollisionPointLine() (4 input parameters)
  Name: RL_CheckCollisionPointLine
  Return type: bool
  Description: Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
  Param[1]: point (type: RL_Vector2)
  Param[2]: p1 (type: RL_Vector2)
  Param[3]: p2 (type: RL_Vector2)
  Param[4]: threshold (type: int)
Function 269: RL_CheckCollisionCircleLine() (4 input parameters)
  Name: RL_CheckCollisionCircleLine
  Return type: bool
  Description: Check if circle collides with a line created betweeen two points [p1] and [p2]
  Param[1]: center (type: RL_Vector2)
  Param[2]: radius (type: float)
  Param[3]: p1 (type: RL_Vector2)
  Param[4]: p2 (type: RL_Vector2)
Function 270: RL_GetCollisionRec() (2 input parameters)
  Name: RL_GetCollisionRec
  Return type: RL_Rectangle
  Description: Get collision rectangle for two rectangles collision
  Param[1]: rec1 (type: RL_Rectangle)
  Param[2]: rec2 (type: RL_Rectangle)
Function 271: RL_LoadImage() (1 input parameters)
  Name: RL_LoadImage
  Return type: RL_Image
  Description: Load image from file into CPU memory (RAM)
  Param[1]: fileName (type: const char *)
Function 272: RL_LoadImageRaw() (5 input parameters)
  Name: RL_LoadImageRaw
  Return type: RL_Image
  Description: Load image from RAW file data
  Param[1]: fileName (type: const char *)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
  Param[4]: format (type: int)
  Param[5]: headerSize (type: int)
Function 273: RL_LoadImageSvg() (3 input parameters)
  Name: RL_LoadImageSvg
  Return type: RL_Image
  Description: Load image from SVG file data or string with specified size
  Param[1]: fileNameOrString (type: const char *)
  Param[2]: width (type: int)
  Param[3]: height (type: int)
Function 274: RL_LoadImageAnim() (2 input parameters)
  Name: RL_LoadImageAnim
  Return type: RL_Image
  Description: Load image sequence from file (frames appended to image.data)
  Param[1]: fileName (type: const char *)
  Param[2]: frames (type: int *)
Function 275: RL_LoadImageAnimFromMemory() (4 input parameters)
  Name: RL_LoadImageAnimFromMemory
  Return type: RL_Image
  Description: Load image sequence from memory buffer
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
  Param[4]: frames (type: int *)
Function 276: RL_LoadImageFromMemory() (3 input parameters)
  Name: RL_LoadImageFromMemory
  Return type: RL_Image
  Description: Load image from memory buffer, fileType refers to extension: i.e. '.png'
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
Function 277: RL_LoadImageFromTexture() (1 input parameters)
  Name: RL_LoadImageFromTexture
  Return type: RL_Image
  Description: Load image from GPU texture data
  Param[1]: texture (type: RL_Texture2D)
Function 278: RL_LoadImageFromScreen() (0 input parameters)
  Name: RL_LoadImageFromScreen
  Return type: RL_Image
  Description: Load image from screen buffer and (screenshot)
  No input parameters
Function 279: RL_IsImageReady() (1 input parameters)
  Name: RL_IsImageReady
  Return type: bool
  Description: Check if an image is ready
  Param[1]: image (type: RL_Image)
Function 280: RL_UnloadImage() (1 input parameters)
  Name: RL_UnloadImage
  Return type: void
  Description: Unload image from CPU memory (RAM)
  Param[1]: image (type: RL_Image)
Function 281: RL_ExportImage() (2 input parameters)
  Name: RL_ExportImage
  Return type: bool
  Description: Export image data to file, returns true on success
  Param[1]: image (type: RL_Image)
  Param[2]: fileName (type: const char *)
Function 282: RL_ExportImageToMemory() (3 input parameters)
  Name: RL_ExportImageToMemory
  Return type: unsigned char *
  Description: Export image to memory buffer
  Param[1]: image (type: RL_Image)
  Param[2]: fileType (type: const char *)
  Param[3]: fileSize (type: int *)
Function 283: RL_ExportImageAsCode() (2 input parameters)
  Name: RL_ExportImageAsCode
  Return type: bool
  Description: Export image as code file defining an array of bytes, returns true on success
  Param[1]: image (type: RL_Image)
  Param[2]: fileName (type: const char *)
Function 284: RL_GenImageColor() (3 input parameters)
  Name: RL_GenImageColor
  Return type: RL_Image
  Description: Generate image: plain color
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: color (type: RL_Color)
Function 285: RL_GenImageGradientLinear() (5 input parameters)
  Name: RL_GenImageGradientLinear
  Return type: RL_Image
  Description: Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: direction (type: int)
  Param[4]: start (type: RL_Color)
  Param[5]: end (type: RL_Color)
Function 286: RL_GenImageGradientRadial() (5 input parameters)
  Name: RL_GenImageGradientRadial
  Return type: RL_Image
  Description: Generate image: radial gradient
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: density (type: float)
  Param[4]: inner (type: RL_Color)
  Param[5]: outer (type: RL_Color)
Function 287: RL_GenImageGradientSquare() (5 input parameters)
  Name: RL_GenImageGradientSquare
  Return type: RL_Image
  Description: Generate image: square gradient
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: density (type: float)
  Param[4]: inner (type: RL_Color)
  Param[5]: outer (type: RL_Color)
Function 288: RL_GenImageChecked() (6 input parameters)
  Name: RL_GenImageChecked
  Return type: RL_Image
  Description: Generate image: checked
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: checksX (type: int)
  Param[4]: checksY (type: int)
  Param[5]: col1 (type: RL_Color)
  Param[6]: col2 (type: RL_Color)
Function 289: RL_GenImageWhiteNoise() (3 input parameters)
  Name: RL_GenImageWhiteNoise
  Return type: RL_Image
  Description: Generate image: white noise
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: factor (type: float)
Function 290: RL_GenImagePerlinNoise() (5 input parameters)
  Name: RL_GenImagePerlinNoise
  Return type: RL_Image
  Description: Generate image: perlin noise
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: offsetX (type: int)
  Param[4]: offsetY (type: int)
  Param[5]: scale (type: float)
Function 291: RL_GenImageCellular() (3 input parameters)
  Name: RL_GenImageCellular
  Return type: RL_Image
  Description: Generate image: cellular algorithm, bigger tileSize means bigger cells
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: tileSize (type: int)
Function 292: RL_GenImageText() (3 input parameters)
  Name: RL_GenImageText
  Return type: RL_Image
  Description: Generate image: grayscale image from text data
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: text (type: const char *)
Function 293: RL_ImageCopy() (1 input parameters)
  Name: RL_ImageCopy
  Return type: RL_Image
  Description: Create an image duplicate (useful for transformations)
  Param[1]: image (type: RL_Image)
Function 294: RL_ImageFromImage() (2 input parameters)
  Name: RL_ImageFromImage
  Return type: RL_Image
  Description: Create an image from another image piece
  Param[1]: image (type: RL_Image)
  Param[2]: rec (type: RL_Rectangle)
Function 295: RL_ImageFromChannel() (2 input parameters)
  Name: RL_ImageFromChannel
  Return type: RL_Image
  Description: Create an image from a selected channel of another image (GRAYSCALE)
  Param[1]: image (type: RL_Image)
  Param[2]: selectedChannel (type: int)
Function 296: RL_ImageText() (3 input parameters)
  Name: RL_ImageText
  Return type: RL_Image
  Description: Create an image from text (default font)
  Param[1]: text (type: const char *)
  Param[2]: fontSize (type: int)
  Param[3]: color (type: RL_Color)
Function 297: RL_ImageTextEx() (5 input parameters)
  Name: RL_ImageTextEx
  Return type: RL_Image
  Description: Create an image from text (custom sprite font)
  Param[1]: font (type: RL_Font)
  Param[2]: text (type: const char *)
  Param[3]: fontSize (type: float)
  Param[4]: spacing (type: float)
  Param[5]: tint (type: RL_Color)
Function 298: RL_ImageFormat() (2 input parameters)
  Name: RL_ImageFormat
  Return type: void
  Description: Convert image data to desired format
  Param[1]: image (type: RL_Image *)
  Param[2]: newFormat (type: int)
Function 299: RL_ImageToPOT() (2 input parameters)
  Name: RL_ImageToPOT
  Return type: void
  Description: Convert image to POT (power-of-two)
  Param[1]: image (type: RL_Image *)
  Param[2]: fill (type: RL_Color)
Function 300: RL_ImageCrop() (2 input parameters)
  Name: RL_ImageCrop
  Return type: void
  Description: Crop an image to a defined rectangle
  Param[1]: image (type: RL_Image *)
  Param[2]: crop (type: RL_Rectangle)
Function 301: RL_ImageAlphaCrop() (2 input parameters)
  Name: RL_ImageAlphaCrop
  Return type: void
  Description: Crop image depending on alpha value
  Param[1]: image (type: RL_Image *)
  Param[2]: threshold (type: float)
Function 302: RL_ImageAlphaClear() (3 input parameters)
  Name: RL_ImageAlphaClear
  Return type: void
  Description: Clear alpha channel to desired color
  Param[1]: image (type: RL_Image *)
  Param[2]: color (type: RL_Color)
  Param[3]: threshold (type: float)
Function 303: RL_ImageAlphaMask() (2 input parameters)
  Name: RL_ImageAlphaMask
  Return type: void
  Description: Apply alpha mask to image
  Param[1]: image (type: RL_Image *)
  Param[2]: alphaMask (type: RL_Image)
Function 304: RL_ImageAlphaPremultiply() (1 input parameters)
  Name: RL_ImageAlphaPremultiply
  Return type: void
  Description: Premultiply alpha channel
  Param[1]: image (type: RL_Image *)
Function 305: RL_ImageBlurGaussian() (2 input parameters)
  Name: RL_ImageBlurGaussian
  Return type: void
  Description: Apply Gaussian blur using a box blur approximation
  Param[1]: image (type: RL_Image *)
  Param[2]: blurSize (type: int)
Function 306: RL_ImageKernelConvolution() (3 input parameters)
  Name: RL_ImageKernelConvolution
  Return type: void
  Description: Apply custom square convolution kernel to image
  Param[1]: image (type: RL_Image *)
  Param[2]: kernel (type: const float *)
  Param[3]: kernelSize (type: int)
Function 307: RL_ImageResize() (3 input parameters)
  Name: RL_ImageResize
  Return type: void
  Description: Resize image (Bicubic scaling algorithm)
  Param[1]: image (type: RL_Image *)
  Param[2]: newWidth (type: int)
  Param[3]: newHeight (type: int)
Function 308: RL_ImageResizeNN() (3 input parameters)
  Name: RL_ImageResizeNN
  Return type: void
  Description: Resize image (Nearest-Neighbor scaling algorithm)
  Param[1]: image (type: RL_Image *)
  Param[2]: newWidth (type: int)
  Param[3]: newHeight (type: int)
Function 309: RL_ImageResizeCanvas() (6 input parameters)
  Name: RL_ImageResizeCanvas
  Return type: void
  Description: Resize canvas and fill with color
  Param[1]: image (type: RL_Image *)
  Param[2]: newWidth (type: int)
  Param[3]: newHeight (type: int)
  Param[4]: offsetX (type: int)
  Param[5]: offsetY (type: int)
  Param[6]: fill (type: RL_Color)
Function 310: RL_ImageMipmaps() (1 input parameters)
  Name: RL_ImageMipmaps
  Return type: void
  Description: Compute all mipmap levels for a provided image
  Param[1]: image (type: RL_Image *)
Function 311: RL_ImageDither() (5 input parameters)
  Name: RL_ImageDither
  Return type: void
  Description: Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
  Param[1]: image (type: RL_Image *)
  Param[2]: rBpp (type: int)
  Param[3]: gBpp (type: int)
  Param[4]: bBpp (type: int)
  Param[5]: aBpp (type: int)
Function 312: RL_ImageFlipVertical() (1 input parameters)
  Name: RL_ImageFlipVertical
  Return type: void
  Description: Flip image vertically
  Param[1]: image (type: RL_Image *)
Function 313: RL_ImageFlipHorizontal() (1 input parameters)
  Name: RL_ImageFlipHorizontal
  Return type: void
  Description: Flip image horizontally
  Param[1]: image (type: RL_Image *)
Function 314: RL_ImageRotate() (2 input parameters)
  Name: RL_ImageRotate
  Return type: void
  Description: Rotate image by input angle in degrees (-359 to 359)
  Param[1]: image (type: RL_Image *)
  Param[2]: degrees (type: int)
Function 315: RL_ImageRotateCW() (1 input parameters)
  Name: RL_ImageRotateCW
  Return type: void
  Description: Rotate image clockwise 90deg
  Param[1]: image (type: RL_Image *)
Function 316: RL_ImageRotateCCW() (1 input parameters)
  Name: RL_ImageRotateCCW
  Return type: void
  Description: Rotate image counter-clockwise 90deg
  Param[1]: image (type: RL_Image *)
Function 317: RL_ImageColorTint() (2 input parameters)
  Name: RL_ImageColorTint
  Return type: void
  Description: Modify image color: tint
  Param[1]: image (type: RL_Image *)
  Param[2]: color (type: RL_Color)
Function 318: RL_ImageColorInvert() (1 input parameters)
  Name: RL_ImageColorInvert
  Return type: void
  Description: Modify image color: invert
  Param[1]: image (type: RL_Image *)
Function 319: RL_ImageColorGrayscale() (1 input parameters)
  Name: RL_ImageColorGrayscale
  Return type: void
  Description: Modify image color: grayscale
  Param[1]: image (type: RL_Image *)
Function 320: RL_ImageColorContrast() (2 input parameters)
  Name: RL_ImageColorContrast
  Return type: void
  Description: Modify image color: contrast (-100 to 100)
  Param[1]: image (type: RL_Image *)
  Param[2]: contrast (type: float)
Function 321: RL_ImageColorBrightness() (2 input parameters)
  Name: RL_ImageColorBrightness
  Return type: void
  Description: Modify image color: brightness (-255 to 255)
  Param[1]: image (type: RL_Image *)
  Param[2]: brightness (type: int)
Function 322: RL_ImageColorReplace() (3 input parameters)
  Name: RL_ImageColorReplace
  Return type: void
  Description: Modify image color: replace color
  Param[1]: image (type: RL_Image *)
  Param[2]: color (type: RL_Color)
  Param[3]: replace (type: RL_Color)
Function 323: RL_LoadImageColors() (1 input parameters)
  Name: RL_LoadImageColors
  Return type: RL_Color *
  Description: Load color data from image as a RL_Color array (RGBA - 32bit)
  Param[1]: image (type: RL_Image)
Function 324: RL_LoadImagePalette() (3 input parameters)
  Name: RL_LoadImagePalette
  Return type: RL_Color *
  Description: Load colors palette from image as a RL_Color array (RGBA - 32bit)
  Param[1]: image (type: RL_Image)
  Param[2]: maxPaletteSize (type: int)
  Param[3]: colorCount (type: int *)
Function 325: RL_UnloadImageColors() (1 input parameters)
  Name: RL_UnloadImageColors
  Return type: void
  Description: Unload color data loaded with RL_LoadImageColors()
  Param[1]: colors (type: RL_Color *)
Function 326: RL_UnloadImagePalette() (1 input parameters)
  Name: RL_UnloadImagePalette
  Return type: void
  Description: Unload colors palette loaded with RL_LoadImagePalette()
  Param[1]: colors (type: RL_Color *)
Function 327: RL_GetImageAlphaBorder() (2 input parameters)
  Name: RL_GetImageAlphaBorder
  Return type: RL_Rectangle
  Description: Get image alpha border rectangle
  Param[1]: image (type: RL_Image)
  Param[2]: threshold (type: float)
Function 328: RL_GetImageColor() (3 input parameters)
  Name: RL_GetImageColor
  Return type: RL_Color
  Description: Get image pixel color at (x, y) position
  Param[1]: image (type: RL_Image)
  Param[2]: x (type: int)
  Param[3]: y (type: int)
Function 329: RL_ImageClearBackground() (2 input parameters)
  Name: RL_ImageClearBackground
  Return type: void
  Description: Clear image background with given color
  Param[1]: dst (type: RL_Image *)
  Param[2]: color (type: RL_Color)
Function 330: RL_ImageDrawPixel() (4 input parameters)
  Name: RL_ImageDrawPixel
  Return type: void
  Description: Draw pixel within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: color (type: RL_Color)
Function 331: RL_ImageDrawPixelV() (3 input parameters)
  Name: RL_ImageDrawPixelV
  Return type: void
  Description: Draw pixel within an image (Vector version)
  Param[1]: dst (type: RL_Image *)
  Param[2]: position (type: RL_Vector2)
  Param[3]: color (type: RL_Color)
Function 332: RL_ImageDrawLine() (6 input parameters)
  Name: RL_ImageDrawLine
  Return type: void
  Description: Draw line within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: startPosX (type: int)
  Param[3]: startPosY (type: int)
  Param[4]: endPosX (type: int)
  Param[5]: endPosY (type: int)
  Param[6]: color (type: RL_Color)
Function 333: RL_ImageDrawLineV() (4 input parameters)
  Name: RL_ImageDrawLineV
  Return type: void
  Description: Draw line within an image (Vector version)
  Param[1]: dst (type: RL_Image *)
  Param[2]: start (type: RL_Vector2)
  Param[3]: end (type: RL_Vector2)
  Param[4]: color (type: RL_Color)
Function 334: RL_ImageDrawLineEx() (5 input parameters)
  Name: RL_ImageDrawLineEx
  Return type: void
  Description: Draw a line defining thickness within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: start (type: RL_Vector2)
  Param[3]: end (type: RL_Vector2)
  Param[4]: thick (type: int)
  Param[5]: color (type: RL_Color)
Function 335: RL_ImageDrawCircle() (5 input parameters)
  Name: RL_ImageDrawCircle
  Return type: void
  Description: Draw a filled circle within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: centerX (type: int)
  Param[3]: centerY (type: int)
  Param[4]: radius (type: int)
  Param[5]: color (type: RL_Color)
Function 336: RL_ImageDrawCircleV() (4 input parameters)
  Name: RL_ImageDrawCircleV
  Return type: void
  Description: Draw a filled circle within an image (Vector version)
  Param[1]: dst (type: RL_Image *)
  Param[2]: center (type: RL_Vector2)
  Param[3]: radius (type: int)
  Param[4]: color (type: RL_Color)
Function 337: RL_ImageDrawCircleLines() (5 input parameters)
  Name: RL_ImageDrawCircleLines
  Return type: void
  Description: Draw circle outline within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: centerX (type: int)
  Param[3]: centerY (type: int)
  Param[4]: radius (type: int)
  Param[5]: color (type: RL_Color)
Function 338: RL_ImageDrawCircleLinesV() (4 input parameters)
  Name: RL_ImageDrawCircleLinesV
  Return type: void
  Description: Draw circle outline within an image (Vector version)
  Param[1]: dst (type: RL_Image *)
  Param[2]: center (type: RL_Vector2)
  Param[3]: radius (type: int)
  Param[4]: color (type: RL_Color)
Function 339: RL_ImageDrawRectangle() (6 input parameters)
  Name: RL_ImageDrawRectangle
  Return type: void
  Description: Draw rectangle within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: width (type: int)
  Param[5]: height (type: int)
  Param[6]: color (type: RL_Color)
Function 340: RL_ImageDrawRectangleV() (4 input parameters)
  Name: RL_ImageDrawRectangleV
  Return type: void
  Description: Draw rectangle within an image (Vector version)
  Param[1]: dst (type: RL_Image *)
  Param[2]: position (type: RL_Vector2)
  Param[3]: size (type: RL_Vector2)
  Param[4]: color (type: RL_Color)
Function 341: RL_ImageDrawRectangleRec() (3 input parameters)
  Name: RL_ImageDrawRectangleRec
  Return type: void
  Description: Draw rectangle within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: rec (type: RL_Rectangle)
  Param[3]: color (type: RL_Color)
Function 342: RL_ImageDrawRectangleLines() (4 input parameters)
  Name: RL_ImageDrawRectangleLines
  Return type: void
  Description: Draw rectangle lines within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: rec (type: RL_Rectangle)
  Param[3]: thick (type: int)
  Param[4]: color (type: RL_Color)
Function 343: RL_ImageDrawTriangle() (5 input parameters)
  Name: RL_ImageDrawTriangle
  Return type: void
  Description: Draw triangle within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: v1 (type: RL_Vector2)
  Param[3]: v2 (type: RL_Vector2)
  Param[4]: v3 (type: RL_Vector2)
  Param[5]: color (type: RL_Color)
Function 344: RL_ImageDrawTriangleEx() (7 input parameters)
  Name: RL_ImageDrawTriangleEx
  Return type: void
  Description: Draw triangle with interpolated colors within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: v1 (type: RL_Vector2)
  Param[3]: v2 (type: RL_Vector2)
  Param[4]: v3 (type: RL_Vector2)
  Param[5]: c1 (type: RL_Color)
  Param[6]: c2 (type: RL_Color)
  Param[7]: c3 (type: RL_Color)
Function 345: RL_ImageDrawTriangleLines() (5 input parameters)
  Name: RL_ImageDrawTriangleLines
  Return type: void
  Description: Draw triangle outline within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: v1 (type: RL_Vector2)
  Param[3]: v2 (type: RL_Vector2)
  Param[4]: v3 (type: RL_Vector2)
  Param[5]: color (type: RL_Color)
Function 346: RL_ImageDrawTriangleFan() (4 input parameters)
  Name: RL_ImageDrawTriangleFan
  Return type: void
  Description: Draw a triangle fan defined by points within an image (first vertex is the center)
  Param[1]: dst (type: RL_Image *)
  Param[2]: points (type: RL_Vector2 *)
  Param[3]: pointCount (type: int)
  Param[4]: color (type: RL_Color)
Function 347: RL_ImageDrawTriangleStrip() (4 input parameters)
  Name: RL_ImageDrawTriangleStrip
  Return type: void
  Description: Draw a triangle strip defined by points within an image
  Param[1]: dst (type: RL_Image *)
  Param[2]: points (type: RL_Vector2 *)
  Param[3]: pointCount (type: int)
  Param[4]: color (type: RL_Color)
Function 348: RL_ImageDraw() (5 input parameters)
  Name: RL_ImageDraw
  Return type: void
  Description: Draw a source image within a destination image (tint applied to source)
  Param[1]: dst (type: RL_Image *)
  Param[2]: src (type: RL_Image)
  Param[3]: srcRec (type: RL_Rectangle)
  Param[4]: dstRec (type: RL_Rectangle)
  Param[5]: tint (type: RL_Color)
Function 349: RL_ImageDrawText() (6 input parameters)
  Name: RL_ImageDrawText
  Return type: void
  Description: Draw text (using default font) within an image (destination)
  Param[1]: dst (type: RL_Image *)
  Param[2]: text (type: const char *)
  Param[3]: posX (type: int)
  Param[4]: posY (type: int)
  Param[5]: fontSize (type: int)
  Param[6]: color (type: RL_Color)
Function 350: RL_ImageDrawTextEx() (7 input parameters)
  Name: RL_ImageDrawTextEx
  Return type: void
  Description: Draw text (custom sprite font) within an image (destination)
  Param[1]: dst (type: RL_Image *)
  Param[2]: font (type: RL_Font)
  Param[3]: text (type: const char *)
  Param[4]: position (type: RL_Vector2)
  Param[5]: fontSize (type: float)
  Param[6]: spacing (type: float)
  Param[7]: tint (type: RL_Color)
Function 351: RL_LoadTexture() (1 input parameters)
  Name: RL_LoadTexture
  Return type: RL_Texture2D
  Description: Load texture from file into GPU memory (VRAM)
  Param[1]: fileName (type: const char *)
Function 352: RL_LoadTextureFromImage() (1 input parameters)
  Name: RL_LoadTextureFromImage
  Return type: RL_Texture2D
  Description: Load texture from image data
  Param[1]: image (type: RL_Image)
Function 353: RL_LoadTextureCubemap() (2 input parameters)
  Name: RL_LoadTextureCubemap
  Return type: RL_TextureCubemap
  Description: Load cubemap from image, multiple image cubemap layouts supported
  Param[1]: image (type: RL_Image)
  Param[2]: layout (type: int)
Function 354: RL_LoadRenderTexture() (2 input parameters)
  Name: RL_LoadRenderTexture
  Return type: RL_RenderTexture2D
  Description: Load texture for rendering (framebuffer)
  Param[1]: width (type: int)
  Param[2]: height (type: int)
Function 355: RL_IsTextureReady() (1 input parameters)
  Name: RL_IsTextureReady
  Return type: bool
  Description: Check if a texture is ready
  Param[1]: texture (type: RL_Texture2D)
Function 356: RL_UnloadTexture() (1 input parameters)
  Name: RL_UnloadTexture
  Return type: void
  Description: Unload texture from GPU memory (VRAM)
  Param[1]: texture (type: RL_Texture2D)
Function 357: RL_IsRenderTextureReady() (1 input parameters)
  Name: RL_IsRenderTextureReady
  Return type: bool
  Description: Check if a render texture is ready
  Param[1]: target (type: RL_RenderTexture2D)
Function 358: RL_UnloadRenderTexture() (1 input parameters)
  Name: RL_UnloadRenderTexture
  Return type: void
  Description: Unload render texture from GPU memory (VRAM)
  Param[1]: target (type: RL_RenderTexture2D)
Function 359: RL_UpdateTexture() (2 input parameters)
  Name: RL_UpdateTexture
  Return type: void
  Description: Update GPU texture with new data
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: pixels (type: const void *)
Function 360: RL_UpdateTextureRec() (3 input parameters)
  Name: RL_UpdateTextureRec
  Return type: void
  Description: Update GPU texture rectangle with new data
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: rec (type: RL_Rectangle)
  Param[3]: pixels (type: const void *)
Function 361: RL_GenTextureMipmaps() (1 input parameters)
  Name: RL_GenTextureMipmaps
  Return type: void
  Description: Generate GPU mipmaps for a texture
  Param[1]: texture (type: RL_Texture2D *)
Function 362: RL_SetTextureFilter() (2 input parameters)
  Name: RL_SetTextureFilter
  Return type: void
  Description: Set texture scaling filter mode
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: filter (type: int)
Function 363: RL_SetTextureWrap() (2 input parameters)
  Name: RL_SetTextureWrap
  Return type: void
  Description: Set texture wrapping mode
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: wrap (type: int)
Function 364: RL_DrawTexture() (4 input parameters)
  Name: RL_DrawTexture
  Return type: void
  Description: Draw a RL_Texture2D
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: tint (type: RL_Color)
Function 365: RL_DrawTextureV() (3 input parameters)
  Name: RL_DrawTextureV
  Return type: void
  Description: Draw a RL_Texture2D with position defined as RL_Vector2
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: position (type: RL_Vector2)
  Param[3]: tint (type: RL_Color)
Function 366: RL_DrawTextureEx() (5 input parameters)
  Name: RL_DrawTextureEx
  Return type: void
  Description: Draw a RL_Texture2D with extended parameters
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: position (type: RL_Vector2)
  Param[3]: rotation (type: float)
  Param[4]: scale (type: float)
  Param[5]: tint (type: RL_Color)
Function 367: RL_DrawTextureRec() (4 input parameters)
  Name: RL_DrawTextureRec
  Return type: void
  Description: Draw a part of a texture defined by a rectangle
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: source (type: RL_Rectangle)
  Param[3]: position (type: RL_Vector2)
  Param[4]: tint (type: RL_Color)
Function 368: RL_DrawTexturePro() (6 input parameters)
  Name: RL_DrawTexturePro
  Return type: void
  Description: Draw a part of a texture defined by a rectangle with 'pro' parameters
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: source (type: RL_Rectangle)
  Param[3]: dest (type: RL_Rectangle)
  Param[4]: origin (type: RL_Vector2)
  Param[5]: rotation (type: float)
  Param[6]: tint (type: RL_Color)
Function 369: RL_DrawTextureNPatch() (6 input parameters)
  Name: RL_DrawTextureNPatch
  Return type: void
  Description: Draws a texture (or part of it) that stretches or shrinks nicely
  Param[1]: texture (type: RL_Texture2D)
  Param[2]: nPatchInfo (type: RL_NPatchInfo)
  Param[3]: dest (type: RL_Rectangle)
  Param[4]: origin (type: RL_Vector2)
  Param[5]: rotation (type: float)
  Param[6]: tint (type: RL_Color)
Function 370: RL_ColorIsEqual() (2 input parameters)
  Name: RL_ColorIsEqual
  Return type: bool
  Description: Check if two colors are equal
  Param[1]: col1 (type: RL_Color)
  Param[2]: col2 (type: RL_Color)
Function 371: RL_Fade() (2 input parameters)
  Name: RL_Fade
  Return type: RL_Color
  Description: Get color with alpha applied, alpha goes from 0.0f to 1.0f
  Param[1]: color (type: RL_Color)
  Param[2]: alpha (type: float)
Function 372: RL_ColorToInt() (1 input parameters)
  Name: RL_ColorToInt
  Return type: int
  Description: Get hexadecimal value for a RL_Color (0xRRGGBBAA)
  Param[1]: color (type: RL_Color)
Function 373: RL_ColorNormalize() (1 input parameters)
  Name: RL_ColorNormalize
  Return type: RL_Vector4
  Description: Get RL_Color normalized as float [0..1]
  Param[1]: color (type: RL_Color)
Function 374: RL_ColorFromNormalized() (1 input parameters)
  Name: RL_ColorFromNormalized
  Return type: RL_Color
  Description: Get RL_Color from normalized values [0..1]
  Param[1]: normalized (type: RL_Vector4)
Function 375: RL_ColorToHSV() (1 input parameters)
  Name: RL_ColorToHSV
  Return type: RL_Vector3
  Description: Get HSV values for a RL_Color, hue [0..360], saturation/value [0..1]
  Param[1]: color (type: RL_Color)
Function 376: RL_ColorFromHSV() (3 input parameters)
  Name: RL_ColorFromHSV
  Return type: RL_Color
  Description: Get a RL_Color from HSV values, hue [0..360], saturation/value [0..1]
  Param[1]: hue (type: float)
  Param[2]: saturation (type: float)
  Param[3]: value (type: float)
Function 377: RL_ColorTint() (2 input parameters)
  Name: RL_ColorTint
  Return type: RL_Color
  Description: Get color multiplied with another color
  Param[1]: color (type: RL_Color)
  Param[2]: tint (type: RL_Color)
Function 378: RL_ColorBrightness() (2 input parameters)
  Name: RL_ColorBrightness
  Return type: RL_Color
  Description: Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
  Param[1]: color (type: RL_Color)
  Param[2]: factor (type: float)
Function 379: RL_ColorContrast() (2 input parameters)
  Name: RL_ColorContrast
  Return type: RL_Color
  Description: Get color with contrast correction, contrast values between -1.0f and 1.0f
  Param[1]: color (type: RL_Color)
  Param[2]: contrast (type: float)
Function 380: RL_ColorAlpha() (2 input parameters)
  Name: RL_ColorAlpha
  Return type: RL_Color
  Description: Get color with alpha applied, alpha goes from 0.0f to 1.0f
  Param[1]: color (type: RL_Color)
  Param[2]: alpha (type: float)
Function 381: RL_ColorAlphaBlend() (3 input parameters)
  Name: RL_ColorAlphaBlend
  Return type: RL_Color
  Description: Get src alpha-blended into dst color with tint
  Param[1]: dst (type: RL_Color)
  Param[2]: src (type: RL_Color)
  Param[3]: tint (type: RL_Color)
Function 382: ColorLerp() (3 input parameters)
  Name: ColorLerp
  Return type: RL_Color
  Description: Get color lerp interpolation between two colors, factor [0.0f..1.0f]
  Param[1]: color1 (type: RL_Color)
  Param[2]: color2 (type: RL_Color)
  Param[3]: factor (type: float)
Function 383: RL_GetColor() (1 input parameters)
  Name: RL_GetColor
  Return type: RL_Color
  Description: Get RL_Color structure from hexadecimal value
  Param[1]: hexValue (type: unsigned int)
Function 384: RL_GetPixelColor() (2 input parameters)
  Name: RL_GetPixelColor
  Return type: RL_Color
  Description: Get RL_Color from a source pixel pointer of certain format
  Param[1]: srcPtr (type: void *)
  Param[2]: format (type: int)
Function 385: RL_SetPixelColor() (3 input parameters)
  Name: RL_SetPixelColor
  Return type: void
  Description: Set color formatted into destination pixel pointer
  Param[1]: dstPtr (type: void *)
  Param[2]: color (type: RL_Color)
  Param[3]: format (type: int)
Function 386: RL_GetPixelDataSize() (3 input parameters)
  Name: RL_GetPixelDataSize
  Return type: int
  Description: Get pixel data size in bytes for certain format
  Param[1]: width (type: int)
  Param[2]: height (type: int)
  Param[3]: format (type: int)
Function 387: RL_GetFontDefault() (0 input parameters)
  Name: RL_GetFontDefault
  Return type: RL_Font
  Description: Get the default RL_Font
  No input parameters
Function 388: RL_LoadFont() (1 input parameters)
  Name: RL_LoadFont
  Return type: RL_Font
  Description: Load font from file into GPU memory (VRAM)
  Param[1]: fileName (type: const char *)
Function 389: RL_LoadFontEx() (4 input parameters)
  Name: RL_LoadFontEx
  Return type: RL_Font
  Description: Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set, font size is provided in pixels height
  Param[1]: fileName (type: const char *)
  Param[2]: fontSize (type: int)
  Param[3]: codepoints (type: int *)
  Param[4]: codepointCount (type: int)
Function 390: RL_LoadFontFromImage() (3 input parameters)
  Name: RL_LoadFontFromImage
  Return type: RL_Font
  Description: Load font from RL_Image (XNA style)
  Param[1]: image (type: RL_Image)
  Param[2]: key (type: RL_Color)
  Param[3]: firstChar (type: int)
Function 391: RL_LoadFontFromMemory() (6 input parameters)
  Name: RL_LoadFontFromMemory
  Return type: RL_Font
  Description: Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
  Param[4]: fontSize (type: int)
  Param[5]: codepoints (type: int *)
  Param[6]: codepointCount (type: int)
Function 392: RL_IsFontReady() (1 input parameters)
  Name: RL_IsFontReady
  Return type: bool
  Description: Check if a font is ready
  Param[1]: font (type: RL_Font)
Function 393: RL_LoadFontData() (6 input parameters)
  Name: RL_LoadFontData
  Return type: RL_GlyphInfo *
  Description: Load font data for further use
  Param[1]: fileData (type: const unsigned char *)
  Param[2]: dataSize (type: int)
  Param[3]: fontSize (type: int)
  Param[4]: codepoints (type: int *)
  Param[5]: codepointCount (type: int)
  Param[6]: type (type: int)
Function 394: RL_GenImageFontAtlas() (6 input parameters)
  Name: RL_GenImageFontAtlas
  Return type: RL_Image
  Description: Generate image font atlas using chars info
  Param[1]: glyphs (type: const RL_GlyphInfo *)
  Param[2]: glyphRecs (type: RL_Rectangle **)
  Param[3]: glyphCount (type: int)
  Param[4]: fontSize (type: int)
  Param[5]: padding (type: int)
  Param[6]: packMethod (type: int)
Function 395: RL_UnloadFontData() (2 input parameters)
  Name: RL_UnloadFontData
  Return type: void
  Description: Unload font chars info data (RAM)
  Param[1]: glyphs (type: RL_GlyphInfo *)
  Param[2]: glyphCount (type: int)
Function 396: RL_UnloadFont() (1 input parameters)
  Name: RL_UnloadFont
  Return type: void
  Description: Unload font from GPU memory (VRAM)
  Param[1]: font (type: RL_Font)
Function 397: RL_ExportFontAsCode() (2 input parameters)
  Name: RL_ExportFontAsCode
  Return type: bool
  Description: Export font as code file, returns true on success
  Param[1]: font (type: RL_Font)
  Param[2]: fileName (type: const char *)
Function 398: RL_DrawFPS() (2 input parameters)
  Name: RL_DrawFPS
  Return type: void
  Description: Draw current FPS
  Param[1]: posX (type: int)
  Param[2]: posY (type: int)
Function 399: RL_DrawText() (5 input parameters)
  Name: RL_DrawText
  Return type: void
  Description: Draw text (using default font)
  Param[1]: text (type: const char *)
  Param[2]: posX (type: int)
  Param[3]: posY (type: int)
  Param[4]: fontSize (type: int)
  Param[5]: color (type: RL_Color)
Function 400: RL_DrawTextEx() (6 input parameters)
  Name: RL_DrawTextEx
  Return type: void
  Description: Draw text using font and additional parameters
  Param[1]: font (type: RL_Font)
  Param[2]: text (type: const char *)
  Param[3]: position (type: RL_Vector2)
  Param[4]: fontSize (type: float)
  Param[5]: spacing (type: float)
  Param[6]: tint (type: RL_Color)
Function 401: RL_DrawTextPro() (8 input parameters)
  Name: RL_DrawTextPro
  Return type: void
  Description: Draw text using RL_Font and pro parameters (rotation)
  Param[1]: font (type: RL_Font)
  Param[2]: text (type: const char *)
  Param[3]: position (type: RL_Vector2)
  Param[4]: origin (type: RL_Vector2)
  Param[5]: rotation (type: float)
  Param[6]: fontSize (type: float)
  Param[7]: spacing (type: float)
  Param[8]: tint (type: RL_Color)
Function 402: RL_DrawTextCodepoint() (5 input parameters)
  Name: RL_DrawTextCodepoint
  Return type: void
  Description: Draw one character (codepoint)
  Param[1]: font (type: RL_Font)
  Param[2]: codepoint (type: int)
  Param[3]: position (type: RL_Vector2)
  Param[4]: fontSize (type: float)
  Param[5]: tint (type: RL_Color)
Function 403: RL_DrawTextCodepoints() (7 input parameters)
  Name: RL_DrawTextCodepoints
  Return type: void
  Description: Draw multiple character (codepoint)
  Param[1]: font (type: RL_Font)
  Param[2]: codepoints (type: const int *)
  Param[3]: codepointCount (type: int)
  Param[4]: position (type: RL_Vector2)
  Param[5]: fontSize (type: float)
  Param[6]: spacing (type: float)
  Param[7]: tint (type: RL_Color)
Function 404: RL_SetTextLineSpacing() (1 input parameters)
  Name: RL_SetTextLineSpacing
  Return type: void
  Description: Set vertical line spacing when drawing with line-breaks
  Param[1]: spacing (type: int)
Function 405: RL_MeasureText() (2 input parameters)
  Name: RL_MeasureText
  Return type: int
  Description: Measure string width for default font
  Param[1]: text (type: const char *)
  Param[2]: fontSize (type: int)
Function 406: RL_MeasureTextEx() (4 input parameters)
  Name: RL_MeasureTextEx
  Return type: RL_Vector2
  Description: Measure string size for RL_Font
  Param[1]: font (type: RL_Font)
  Param[2]: text (type: const char *)
  Param[3]: fontSize (type: float)
  Param[4]: spacing (type: float)
Function 407: RL_GetGlyphIndex() (2 input parameters)
  Name: RL_GetGlyphIndex
  Return type: int
  Description: Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
  Param[1]: font (type: RL_Font)
  Param[2]: codepoint (type: int)
Function 408: RL_GetGlyphInfo() (2 input parameters)
  Name: RL_GetGlyphInfo
  Return type: RL_GlyphInfo
  Description: Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
  Param[1]: font (type: RL_Font)
  Param[2]: codepoint (type: int)
Function 409: RL_GetGlyphAtlasRec() (2 input parameters)
  Name: RL_GetGlyphAtlasRec
  Return type: RL_Rectangle
  Description: Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
  Param[1]: font (type: RL_Font)
  Param[2]: codepoint (type: int)
Function 410: RL_LoadUTF8() (2 input parameters)
  Name: RL_LoadUTF8
  Return type: char *
  Description: Load UTF-8 text encoded from codepoints array
  Param[1]: codepoints (type: const int *)
  Param[2]: length (type: int)
Function 411: RL_UnloadUTF8() (1 input parameters)
  Name: RL_UnloadUTF8
  Return type: void
  Description: Unload UTF-8 text encoded from codepoints array
  Param[1]: text (type: char *)
Function 412: RL_LoadCodepoints() (2 input parameters)
  Name: RL_LoadCodepoints
  Return type: int *
  Description: Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
  Param[1]: text (type: const char *)
  Param[2]: count (type: int *)
Function 413: RL_UnloadCodepoints() (1 input parameters)
  Name: RL_UnloadCodepoints
  Return type: void
  Description: Unload codepoints data from memory
  Param[1]: codepoints (type: int *)
Function 414: RL_GetCodepointCount() (1 input parameters)
  Name: RL_GetCodepointCount
  Return type: int
  Description: Get total number of codepoints in a UTF-8 encoded string
  Param[1]: text (type: const char *)
Function 415: RL_GetCodepoint() (2 input parameters)
  Name: RL_GetCodepoint
  Return type: int
  Description: Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
  Param[1]: text (type: const char *)
  Param[2]: codepointSize (type: int *)
Function 416: RL_GetCodepointNext() (2 input parameters)
  Name: RL_GetCodepointNext
  Return type: int
  Description: Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
  Param[1]: text (type: const char *)
  Param[2]: codepointSize (type: int *)
Function 417: RL_GetCodepointPrevious() (2 input parameters)
  Name: RL_GetCodepointPrevious
  Return type: int
  Description: Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
  Param[1]: text (type: const char *)
  Param[2]: codepointSize (type: int *)
Function 418: RL_CodepointToUTF8() (2 input parameters)
  Name: RL_CodepointToUTF8
  Return type: const char *
  Description: Encode one codepoint into UTF-8 byte array (array length returned as parameter)
  Param[1]: codepoint (type: int)
  Param[2]: utf8Size (type: int *)
Function 419: RL_TextCopy() (2 input parameters)
  Name: RL_TextCopy
  Return type: int
  Description: Copy one string to another, returns bytes copied
  Param[1]: dst (type: char *)
  Param[2]: src (type: const char *)
Function 420: RL_TextIsEqual() (2 input parameters)
  Name: RL_TextIsEqual
  Return type: bool
  Description: Check if two text string are equal
  Param[1]: text1 (type: const char *)
  Param[2]: text2 (type: const char *)
Function 421: RL_TextLength() (1 input parameters)
  Name: RL_TextLength
  Return type: unsigned int
  Description: Get text length, checks for '\0' ending
  Param[1]: text (type: const char *)
Function 422: RL_TextFormat() (2 input parameters)
  Name: RL_TextFormat
  Return type: const char *
  Description: Text formatting with variables (sprintf() style)
  Param[1]: text (type: const char *)
  Param[2]: args (type: ...)
Function 423: RL_TextSubtext() (3 input parameters)
  Name: RL_TextSubtext
  Return type: const char *
  Description: Get a piece of a text string
  Param[1]: text (type: const char *)
  Param[2]: position (type: int)
  Param[3]: length (type: int)
Function 424: RL_TextReplace() (3 input parameters)
  Name: RL_TextReplace
  Return type: char *
  Description: Replace text string (WARNING: memory must be freed!)
  Param[1]: text (type: const char *)
  Param[2]: replace (type: const char *)
  Param[3]: by (type: const char *)
Function 425: RL_TextInsert() (3 input parameters)
  Name: RL_TextInsert
  Return type: char *
  Description: Insert text in a position (WARNING: memory must be freed!)
  Param[1]: text (type: const char *)
  Param[2]: insert (type: const char *)
  Param[3]: position (type: int)
Function 426: RL_TextJoin() (3 input parameters)
  Name: RL_TextJoin
  Return type: const char *
  Description: Join text strings with delimiter
  Param[1]: textList (type: const char **)
  Param[2]: count (type: int)
  Param[3]: delimiter (type: const char *)
Function 427: RL_TextSplit() (3 input parameters)
  Name: RL_TextSplit
  Return type: const char **
  Description: Split text into multiple strings
  Param[1]: text (type: const char *)
  Param[2]: delimiter (type: char)
  Param[3]: count (type: int *)
Function 428: RL_TextAppend() (3 input parameters)
  Name: RL_TextAppend
  Return type: void
  Description: Append text at specific position and move cursor!
  Param[1]: text (type: char *)
  Param[2]: append (type: const char *)
  Param[3]: position (type: int *)
Function 429: RL_TextFindIndex() (2 input parameters)
  Name: RL_TextFindIndex
  Return type: int
  Description: Find first text occurrence within a string
  Param[1]: text (type: const char *)
  Param[2]: find (type: const char *)
Function 430: RL_TextToUpper() (1 input parameters)
  Name: RL_TextToUpper
  Return type: const char *
  Description: Get upper case version of provided string
  Param[1]: text (type: const char *)
Function 431: RL_TextToLower() (1 input parameters)
  Name: RL_TextToLower
  Return type: const char *
  Description: Get lower case version of provided string
  Param[1]: text (type: const char *)
Function 432: RL_TextToPascal() (1 input parameters)
  Name: RL_TextToPascal
  Return type: const char *
  Description: Get Pascal case notation version of provided string
  Param[1]: text (type: const char *)
Function 433: RL_TextToSnake() (1 input parameters)
  Name: RL_TextToSnake
  Return type: const char *
  Description: Get Snake case notation version of provided string
  Param[1]: text (type: const char *)
Function 434: RL_TextToCamel() (1 input parameters)
  Name: RL_TextToCamel
  Return type: const char *
  Description: Get Camel case notation version of provided string
  Param[1]: text (type: const char *)
Function 435: RL_TextToInteger() (1 input parameters)
  Name: RL_TextToInteger
  Return type: int
  Description: Get integer value from text (negative values not supported)
  Param[1]: text (type: const char *)
Function 436: RL_TextToFloat() (1 input parameters)
  Name: RL_TextToFloat
  Return type: float
  Description: Get float value from text (negative values not supported)
  Param[1]: text (type: const char *)
Function 437: RL_DrawLine3D() (3 input parameters)
  Name: RL_DrawLine3D
  Return type: void
  Description: Draw a line in 3D world space
  Param[1]: startPos (type: RL_Vector3)
  Param[2]: endPos (type: RL_Vector3)
  Param[3]: color (type: RL_Color)
Function 438: RL_DrawPoint3D() (2 input parameters)
  Name: RL_DrawPoint3D
  Return type: void
  Description: Draw a point in 3D space, actually a small line
  Param[1]: position (type: RL_Vector3)
  Param[2]: color (type: RL_Color)
Function 439: RL_DrawCircle3D() (5 input parameters)
  Name: RL_DrawCircle3D
  Return type: void
  Description: Draw a circle in 3D world space
  Param[1]: center (type: RL_Vector3)
  Param[2]: radius (type: float)
  Param[3]: rotationAxis (type: RL_Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: color (type: RL_Color)
Function 440: RL_DrawTriangle3D() (4 input parameters)
  Name: RL_DrawTriangle3D
  Return type: void
  Description: Draw a color-filled triangle (vertex in counter-clockwise order!)
  Param[1]: v1 (type: RL_Vector3)
  Param[2]: v2 (type: RL_Vector3)
  Param[3]: v3 (type: RL_Vector3)
  Param[4]: color (type: RL_Color)
Function 441: RL_DrawTriangleStrip3D() (3 input parameters)
  Name: RL_DrawTriangleStrip3D
  Return type: void
  Description: Draw a triangle strip defined by points
  Param[1]: points (type: const RL_Vector3 *)
  Param[2]: pointCount (type: int)
  Param[3]: color (type: RL_Color)
Function 442: RL_DrawCube() (5 input parameters)
  Name: RL_DrawCube
  Return type: void
  Description: Draw cube
  Param[1]: position (type: RL_Vector3)
  Param[2]: width (type: float)
  Param[3]: height (type: float)
  Param[4]: length (type: float)
  Param[5]: color (type: RL_Color)
Function 443: RL_DrawCubeV() (3 input parameters)
  Name: RL_DrawCubeV
  Return type: void
  Description: Draw cube (Vector version)
  Param[1]: position (type: RL_Vector3)
  Param[2]: size (type: RL_Vector3)
  Param[3]: color (type: RL_Color)
Function 444: RL_DrawCubeWires() (5 input parameters)
  Name: RL_DrawCubeWires
  Return type: void
  Description: Draw cube wires
  Param[1]: position (type: RL_Vector3)
  Param[2]: width (type: float)
  Param[3]: height (type: float)
  Param[4]: length (type: float)
  Param[5]: color (type: RL_Color)
Function 445: RL_DrawCubeWiresV() (3 input parameters)
  Name: RL_DrawCubeWiresV
  Return type: void
  Description: Draw cube wires (Vector version)
  Param[1]: position (type: RL_Vector3)
  Param[2]: size (type: RL_Vector3)
  Param[3]: color (type: RL_Color)
Function 446: RL_DrawSphere() (3 input parameters)
  Name: RL_DrawSphere
  Return type: void
  Description: Draw sphere
  Param[1]: centerPos (type: RL_Vector3)
  Param[2]: radius (type: float)
  Param[3]: color (type: RL_Color)
Function 447: RL_DrawSphereEx() (5 input parameters)
  Name: RL_DrawSphereEx
  Return type: void
  Description: Draw sphere with extended parameters
  Param[1]: centerPos (type: RL_Vector3)
  Param[2]: radius (type: float)
  Param[3]: rings (type: int)
  Param[4]: slices (type: int)
  Param[5]: color (type: RL_Color)
Function 448: RL_DrawSphereWires() (5 input parameters)
  Name: RL_DrawSphereWires
  Return type: void
  Description: Draw sphere wires
  Param[1]: centerPos (type: RL_Vector3)
  Param[2]: radius (type: float)
  Param[3]: rings (type: int)
  Param[4]: slices (type: int)
  Param[5]: color (type: RL_Color)
Function 449: RL_DrawCylinder() (6 input parameters)
  Name: RL_DrawCylinder
  Return type: void
  Description: Draw a cylinder/cone
  Param[1]: position (type: RL_Vector3)
  Param[2]: radiusTop (type: float)
  Param[3]: radiusBottom (type: float)
  Param[4]: height (type: float)
  Param[5]: slices (type: int)
  Param[6]: color (type: RL_Color)
Function 450: RL_DrawCylinderEx() (6 input parameters)
  Name: RL_DrawCylinderEx
  Return type: void
  Description: Draw a cylinder with base at startPos and top at endPos
  Param[1]: startPos (type: RL_Vector3)
  Param[2]: endPos (type: RL_Vector3)
  Param[3]: startRadius (type: float)
  Param[4]: endRadius (type: float)
  Param[5]: sides (type: int)
  Param[6]: color (type: RL_Color)
Function 451: RL_DrawCylinderWires() (6 input parameters)
  Name: RL_DrawCylinderWires
  Return type: void
  Description: Draw a cylinder/cone wires
  Param[1]: position (type: RL_Vector3)
  Param[2]: radiusTop (type: float)
  Param[3]: radiusBottom (type: float)
  Param[4]: height (type: float)
  Param[5]: slices (type: int)
  Param[6]: color (type: RL_Color)
Function 452: RL_DrawCylinderWiresEx() (6 input parameters)
  Name: RL_DrawCylinderWiresEx
  Return type: void
  Description: Draw a cylinder wires with base at startPos and top at endPos
  Param[1]: startPos (type: RL_Vector3)
  Param[2]: endPos (type: RL_Vector3)
  Param[3]: startRadius (type: float)
  Param[4]: endRadius (type: float)
  Param[5]: sides (type: int)
  Param[6]: color (type: RL_Color)
Function 453: RL_DrawCapsule() (6 input parameters)
  Name: RL_DrawCapsule
  Return type: void
  Description: Draw a capsule with the center of its sphere caps at startPos and endPos
  Param[1]: startPos (type: RL_Vector3)
  Param[2]: endPos (type: RL_Vector3)
  Param[3]: radius (type: float)
  Param[4]: slices (type: int)
  Param[5]: rings (type: int)
  Param[6]: color (type: RL_Color)
Function 454: RL_DrawCapsuleWires() (6 input parameters)
  Name: RL_DrawCapsuleWires
  Return type: void
  Description: Draw capsule wireframe with the center of its sphere caps at startPos and endPos
  Param[1]: startPos (type: RL_Vector3)
  Param[2]: endPos (type: RL_Vector3)
  Param[3]: radius (type: float)
  Param[4]: slices (type: int)
  Param[5]: rings (type: int)
  Param[6]: color (type: RL_Color)
Function 455: RL_DrawPlane() (3 input parameters)
  Name: RL_DrawPlane
  Return type: void
  Description: Draw a plane XZ
  Param[1]: centerPos (type: RL_Vector3)
  Param[2]: size (type: RL_Vector2)
  Param[3]: color (type: RL_Color)
Function 456: RL_DrawRay() (2 input parameters)
  Name: RL_DrawRay
  Return type: void
  Description: Draw a ray line
  Param[1]: ray (type: RL_Ray)
  Param[2]: color (type: RL_Color)
Function 457: RL_DrawGrid() (2 input parameters)
  Name: RL_DrawGrid
  Return type: void
  Description: Draw a grid (centered at (0, 0, 0))
  Param[1]: slices (type: int)
  Param[2]: spacing (type: float)
Function 458: RL_LoadModel() (1 input parameters)
  Name: RL_LoadModel
  Return type: RL_Model
  Description: Load model from files (meshes and materials)
  Param[1]: fileName (type: const char *)
Function 459: RL_LoadModelFromMesh() (1 input parameters)
  Name: RL_LoadModelFromMesh
  Return type: RL_Model
  Description: Load model from generated mesh (default material)
  Param[1]: mesh (type: RL_Mesh)
Function 460: RL_IsModelReady() (1 input parameters)
  Name: RL_IsModelReady
  Return type: bool
  Description: Check if a model is ready
  Param[1]: model (type: RL_Model)
Function 461: RL_UnloadModel() (1 input parameters)
  Name: RL_UnloadModel
  Return type: void
  Description: Unload model (including meshes) from memory (RAM and/or VRAM)
  Param[1]: model (type: RL_Model)
Function 462: RL_GetModelBoundingBox() (1 input parameters)
  Name: RL_GetModelBoundingBox
  Return type: RL_BoundingBox
  Description: Compute model bounding box limits (considers all meshes)
  Param[1]: model (type: RL_Model)
Function 463: RL_DrawModel() (4 input parameters)
  Name: RL_DrawModel
  Return type: void
  Description: Draw a model (with texture if set)
  Param[1]: model (type: RL_Model)
  Param[2]: position (type: RL_Vector3)
  Param[3]: scale (type: float)
  Param[4]: tint (type: RL_Color)
Function 464: RL_DrawModelEx() (6 input parameters)
  Name: RL_DrawModelEx
  Return type: void
  Description: Draw a model with extended parameters
  Param[1]: model (type: RL_Model)
  Param[2]: position (type: RL_Vector3)
  Param[3]: rotationAxis (type: RL_Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: scale (type: RL_Vector3)
  Param[6]: tint (type: RL_Color)
Function 465: RL_DrawModelWires() (4 input parameters)
  Name: RL_DrawModelWires
  Return type: void
  Description: Draw a model wires (with texture if set)
  Param[1]: model (type: RL_Model)
  Param[2]: position (type: RL_Vector3)
  Param[3]: scale (type: float)
  Param[4]: tint (type: RL_Color)
Function 466: RL_DrawModelWiresEx() (6 input parameters)
  Name: RL_DrawModelWiresEx
  Return type: void
  Description: Draw a model wires (with texture if set) with extended parameters
  Param[1]: model (type: RL_Model)
  Param[2]: position (type: RL_Vector3)
  Param[3]: rotationAxis (type: RL_Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: scale (type: RL_Vector3)
  Param[6]: tint (type: RL_Color)
Function 467: DrawModelPoints() (4 input parameters)
  Name: DrawModelPoints
  Return type: void
  Description: Draw a model as points
  Param[1]: model (type: RL_Model)
  Param[2]: position (type: RL_Vector3)
  Param[3]: scale (type: float)
  Param[4]: tint (type: RL_Color)
Function 468: DrawModelPointsEx() (6 input parameters)
  Name: DrawModelPointsEx
  Return type: void
  Description: Draw a model as points with extended parameters
  Param[1]: model (type: RL_Model)
  Param[2]: position (type: RL_Vector3)
  Param[3]: rotationAxis (type: RL_Vector3)
  Param[4]: rotationAngle (type: float)
  Param[5]: scale (type: RL_Vector3)
  Param[6]: tint (type: RL_Color)
Function 469: RL_DrawBoundingBox() (2 input parameters)
  Name: RL_DrawBoundingBox
  Return type: void
  Description: Draw bounding box (wires)
  Param[1]: box (type: RL_BoundingBox)
  Param[2]: color (type: RL_Color)
Function 470: RL_DrawBillboard() (5 input parameters)
  Name: RL_DrawBillboard
  Return type: void
  Description: Draw a billboard texture
  Param[1]: camera (type: RL_Camera)
  Param[2]: texture (type: RL_Texture2D)
  Param[3]: position (type: RL_Vector3)
  Param[4]: scale (type: float)
  Param[5]: tint (type: RL_Color)
Function 471: RL_DrawBillboardRec() (6 input parameters)
  Name: RL_DrawBillboardRec
  Return type: void
  Description: Draw a billboard texture defined by source
  Param[1]: camera (type: RL_Camera)
  Param[2]: texture (type: RL_Texture2D)
  Param[3]: source (type: RL_Rectangle)
  Param[4]: position (type: RL_Vector3)
  Param[5]: size (type: RL_Vector2)
  Param[6]: tint (type: RL_Color)
Function 472: RL_DrawBillboardPro() (9 input parameters)
  Name: RL_DrawBillboardPro
  Return type: void
  Description: Draw a billboard texture defined by source and rotation
  Param[1]: camera (type: RL_Camera)
  Param[2]: texture (type: RL_Texture2D)
  Param[3]: source (type: RL_Rectangle)
  Param[4]: position (type: RL_Vector3)
  Param[5]: up (type: RL_Vector3)
  Param[6]: size (type: RL_Vector2)
  Param[7]: origin (type: RL_Vector2)
  Param[8]: rotation (type: float)
  Param[9]: tint (type: RL_Color)
Function 473: RL_UploadMesh() (2 input parameters)
  Name: RL_UploadMesh
  Return type: void
  Description: Upload mesh vertex data in GPU and provide VAO/VBO ids
  Param[1]: mesh (type: RL_Mesh *)
  Param[2]: dynamic (type: bool)
Function 474: RL_UpdateMeshBuffer() (5 input parameters)
  Name: RL_UpdateMeshBuffer
  Return type: void
  Description: Update mesh vertex data in GPU for a specific buffer index
  Param[1]: mesh (type: RL_Mesh)
  Param[2]: index (type: int)
  Param[3]: data (type: const void *)
  Param[4]: dataSize (type: int)
  Param[5]: offset (type: int)
Function 475: RL_UnloadMesh() (1 input parameters)
  Name: RL_UnloadMesh
  Return type: void
  Description: Unload mesh data from CPU and GPU
  Param[1]: mesh (type: RL_Mesh)
Function 476: RL_DrawMesh() (3 input parameters)
  Name: RL_DrawMesh
  Return type: void
  Description: Draw a 3d mesh with material and transform
  Param[1]: mesh (type: RL_Mesh)
  Param[2]: material (type: RL_Material)
  Param[3]: transform (type: RL_Matrix)
Function 477: RL_DrawMeshInstanced() (4 input parameters)
  Name: RL_DrawMeshInstanced
  Return type: void
  Description: Draw multiple mesh instances with material and different transforms
  Param[1]: mesh (type: RL_Mesh)
  Param[2]: material (type: RL_Material)
  Param[3]: transforms (type: const RL_Matrix *)
  Param[4]: instances (type: int)
Function 478: RL_GetMeshBoundingBox() (1 input parameters)
  Name: RL_GetMeshBoundingBox
  Return type: RL_BoundingBox
  Description: Compute mesh bounding box limits
  Param[1]: mesh (type: RL_Mesh)
Function 479: RL_GenMeshTangents() (1 input parameters)
  Name: RL_GenMeshTangents
  Return type: void
  Description: Compute mesh tangents
  Param[1]: mesh (type: RL_Mesh *)
Function 480: RL_ExportMesh() (2 input parameters)
  Name: RL_ExportMesh
  Return type: bool
  Description: Export mesh data to file, returns true on success
  Param[1]: mesh (type: RL_Mesh)
  Param[2]: fileName (type: const char *)
Function 481: RL_ExportMeshAsCode() (2 input parameters)
  Name: RL_ExportMeshAsCode
  Return type: bool
  Description: Export mesh as code file (.h) defining multiple arrays of vertex attributes
  Param[1]: mesh (type: RL_Mesh)
  Param[2]: fileName (type: const char *)
Function 482: RL_GenMeshPoly() (2 input parameters)
  Name: RL_GenMeshPoly
  Return type: RL_Mesh
  Description: Generate polygonal mesh
  Param[1]: sides (type: int)
  Param[2]: radius (type: float)
Function 483: RL_GenMeshPlane() (4 input parameters)
  Name: RL_GenMeshPlane
  Return type: RL_Mesh
  Description: Generate plane mesh (with subdivisions)
  Param[1]: width (type: float)
  Param[2]: length (type: float)
  Param[3]: resX (type: int)
  Param[4]: resZ (type: int)
Function 484: RL_GenMeshCube() (3 input parameters)
  Name: RL_GenMeshCube
  Return type: RL_Mesh
  Description: Generate cuboid mesh
  Param[1]: width (type: float)
  Param[2]: height (type: float)
  Param[3]: length (type: float)
Function 485: RL_GenMeshSphere() (3 input parameters)
  Name: RL_GenMeshSphere
  Return type: RL_Mesh
  Description: Generate sphere mesh (standard sphere)
  Param[1]: radius (type: float)
  Param[2]: rings (type: int)
  Param[3]: slices (type: int)
Function 486: RL_GenMeshHemiSphere() (3 input parameters)
  Name: RL_GenMeshHemiSphere
  Return type: RL_Mesh
  Description: Generate half-sphere mesh (no bottom cap)
  Param[1]: radius (type: float)
  Param[2]: rings (type: int)
  Param[3]: slices (type: int)
Function 487: RL_GenMeshCylinder() (3 input parameters)
  Name: RL_GenMeshCylinder
  Return type: RL_Mesh
  Description: Generate cylinder mesh
  Param[1]: radius (type: float)
  Param[2]: height (type: float)
  Param[3]: slices (type: int)
Function 488: RL_GenMeshCone() (3 input parameters)
  Name: RL_GenMeshCone
  Return type: RL_Mesh
  Description: Generate cone/pyramid mesh
  Param[1]: radius (type: float)
  Param[2]: height (type: float)
  Param[3]: slices (type: int)
Function 489: RL_GenMeshTorus() (4 input parameters)
  Name: RL_GenMeshTorus
  Return type: RL_Mesh
  Description: Generate torus mesh
  Param[1]: radius (type: float)
  Param[2]: size (type: float)
  Param[3]: radSeg (type: int)
  Param[4]: sides (type: int)
Function 490: RL_GenMeshKnot() (4 input parameters)
  Name: RL_GenMeshKnot
  Return type: RL_Mesh
  Description: Generate trefoil knot mesh
  Param[1]: radius (type: float)
  Param[2]: size (type: float)
  Param[3]: radSeg (type: int)
  Param[4]: sides (type: int)
Function 491: RL_GenMeshHeightmap() (2 input parameters)
  Name: RL_GenMeshHeightmap
  Return type: RL_Mesh
  Description: Generate heightmap mesh from image data
  Param[1]: heightmap (type: RL_Image)
  Param[2]: size (type: RL_Vector3)
Function 492: RL_GenMeshCubicmap() (2 input parameters)
  Name: RL_GenMeshCubicmap
  Return type: RL_Mesh
  Description: Generate cubes-based map mesh from image data
  Param[1]: cubicmap (type: RL_Image)
  Param[2]: cubeSize (type: RL_Vector3)
Function 493: RL_LoadMaterials() (2 input parameters)
  Name: RL_LoadMaterials
  Return type: RL_Material *
  Description: Load materials from model file
  Param[1]: fileName (type: const char *)
  Param[2]: materialCount (type: int *)
Function 494: RL_LoadMaterialDefault() (0 input parameters)
  Name: RL_LoadMaterialDefault
  Return type: RL_Material
  Description: Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
  No input parameters
Function 495: RL_IsMaterialReady() (1 input parameters)
  Name: RL_IsMaterialReady
  Return type: bool
  Description: Check if a material is ready
  Param[1]: material (type: RL_Material)
Function 496: RL_UnloadMaterial() (1 input parameters)
  Name: RL_UnloadMaterial
  Return type: void
  Description: Unload material from GPU memory (VRAM)
  Param[1]: material (type: RL_Material)
Function 497: RL_SetMaterialTexture() (3 input parameters)
  Name: RL_SetMaterialTexture
  Return type: void
  Description: Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
  Param[1]: material (type: RL_Material *)
  Param[2]: mapType (type: int)
  Param[3]: texture (type: RL_Texture2D)
Function 498: RL_SetModelMeshMaterial() (3 input parameters)
  Name: RL_SetModelMeshMaterial
  Return type: void
  Description: Set material for a mesh
  Param[1]: model (type: RL_Model *)
  Param[2]: meshId (type: int)
  Param[3]: materialId (type: int)
Function 499: RL_LoadModelAnimations() (2 input parameters)
  Name: RL_LoadModelAnimations
  Return type: RL_ModelAnimation *
  Description: Load model animations from file
  Param[1]: fileName (type: const char *)
  Param[2]: animCount (type: int *)
Function 500: RL_UpdateModelAnimation() (3 input parameters)
  Name: RL_UpdateModelAnimation
  Return type: void
  Description: Update model animation pose
  Param[1]: model (type: RL_Model)
  Param[2]: anim (type: RL_ModelAnimation)
  Param[3]: frame (type: int)
Function 501: RL_UnloadModelAnimation() (1 input parameters)
  Name: RL_UnloadModelAnimation
  Return type: void
  Description: Unload animation data
  Param[1]: anim (type: RL_ModelAnimation)
Function 502: RL_UnloadModelAnimations() (2 input parameters)
  Name: RL_UnloadModelAnimations
  Return type: void
  Description: Unload animation array data
  Param[1]: animations (type: RL_ModelAnimation *)
  Param[2]: animCount (type: int)
Function 503: RL_IsModelAnimationValid() (2 input parameters)
  Name: RL_IsModelAnimationValid
  Return type: bool
  Description: Check model animation skeleton match
  Param[1]: model (type: RL_Model)
  Param[2]: anim (type: RL_ModelAnimation)
Function 504: UpdateModelAnimationBoneMatrices() (3 input parameters)
  Name: UpdateModelAnimationBoneMatrices
  Return type: void
  Description: Update model animation mesh bone matrices (Note GPU skinning does not work on Mac)
  Param[1]: model (type: RL_Model)
  Param[2]: anim (type: RL_ModelAnimation)
  Param[3]: frame (type: int)
Function 505: RL_CheckCollisionSpheres() (4 input parameters)
  Name: RL_CheckCollisionSpheres
  Return type: bool
  Description: Check collision between two spheres
  Param[1]: center1 (type: RL_Vector3)
  Param[2]: radius1 (type: float)
  Param[3]: center2 (type: RL_Vector3)
  Param[4]: radius2 (type: float)
Function 506: RL_CheckCollisionBoxes() (2 input parameters)
  Name: RL_CheckCollisionBoxes
  Return type: bool
  Description: Check collision between two bounding boxes
  Param[1]: box1 (type: RL_BoundingBox)
  Param[2]: box2 (type: RL_BoundingBox)
Function 507: RL_CheckCollisionBoxSphere() (3 input parameters)
  Name: RL_CheckCollisionBoxSphere
  Return type: bool
  Description: Check collision between box and sphere
  Param[1]: box (type: RL_BoundingBox)
  Param[2]: center (type: RL_Vector3)
  Param[3]: radius (type: float)
Function 508: RL_GetRayCollisionSphere() (3 input parameters)
  Name: RL_GetRayCollisionSphere
  Return type: RL_RayCollision
  Description: Get collision info between ray and sphere
  Param[1]: ray (type: RL_Ray)
  Param[2]: center (type: RL_Vector3)
  Param[3]: radius (type: float)
Function 509: RL_GetRayCollisionBox() (2 input parameters)
  Name: RL_GetRayCollisionBox
  Return type: RL_RayCollision
  Description: Get collision info between ray and box
  Param[1]: ray (type: RL_Ray)
  Param[2]: box (type: RL_BoundingBox)
Function 510: RL_GetRayCollisionMesh() (3 input parameters)
  Name: RL_GetRayCollisionMesh
  Return type: RL_RayCollision
  Description: Get collision info between ray and mesh
  Param[1]: ray (type: RL_Ray)
  Param[2]: mesh (type: RL_Mesh)
  Param[3]: transform (type: RL_Matrix)
Function 511: RL_GetRayCollisionTriangle() (4 input parameters)
  Name: RL_GetRayCollisionTriangle
  Return type: RL_RayCollision
  Description: Get collision info between ray and triangle
  Param[1]: ray (type: RL_Ray)
  Param[2]: p1 (type: RL_Vector3)
  Param[3]: p2 (type: RL_Vector3)
  Param[4]: p3 (type: RL_Vector3)
Function 512: RL_GetRayCollisionQuad() (5 input parameters)
  Name: RL_GetRayCollisionQuad
  Return type: RL_RayCollision
  Description: Get collision info between ray and quad
  Param[1]: ray (type: RL_Ray)
  Param[2]: p1 (type: RL_Vector3)
  Param[3]: p2 (type: RL_Vector3)
  Param[4]: p3 (type: RL_Vector3)
  Param[5]: p4 (type: RL_Vector3)
Function 513: RL_InitAudioDevice() (0 input parameters)
  Name: RL_InitAudioDevice
  Return type: void
  Description: Initialize audio device and context
  No input parameters
Function 514: RL_CloseAudioDevice() (0 input parameters)
  Name: RL_CloseAudioDevice
  Return type: void
  Description: Close the audio device and context
  No input parameters
Function 515: RL_IsAudioDeviceReady() (0 input parameters)
  Name: RL_IsAudioDeviceReady
  Return type: bool
  Description: Check if audio device has been initialized successfully
  No input parameters
Function 516: RL_SetMasterVolume() (1 input parameters)
  Name: RL_SetMasterVolume
  Return type: void
  Description: Set master volume (listener)
  Param[1]: volume (type: float)
Function 517: RL_GetMasterVolume() (0 input parameters)
  Name: RL_GetMasterVolume
  Return type: float
  Description: Get master volume (listener)
  No input parameters
Function 518: RL_LoadWave() (1 input parameters)
  Name: RL_LoadWave
  Return type: RL_Wave
  Description: Load wave data from file
  Param[1]: fileName (type: const char *)
Function 519: RL_LoadWaveFromMemory() (3 input parameters)
  Name: RL_LoadWaveFromMemory
  Return type: RL_Wave
  Description: Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
  Param[1]: fileType (type: const char *)
  Param[2]: fileData (type: const unsigned char *)
  Param[3]: dataSize (type: int)
Function 520: RL_IsWaveReady() (1 input parameters)
  Name: RL_IsWaveReady
  Return type: bool
  Description: Checks if wave data is ready
  Param[1]: wave (type: RL_Wave)
Function 521: RL_LoadSound() (1 input parameters)
  Name: RL_LoadSound
  Return type: RL_Sound
  Description: Load sound from file
  Param[1]: fileName (type: const char *)
Function 522: RL_LoadSoundFromWave() (1 input parameters)
  Name: RL_LoadSoundFromWave
  Return type: RL_Sound
  Description: Load sound from wave data
  Param[1]: wave (type: RL_Wave)
Function 523: RL_LoadSoundAlias() (1 input parameters)
  Name: RL_LoadSoundAlias
  Return type: RL_Sound
  Description: Create a new sound that shares the same sample data as the source sound, does not own the sound data
  Param[1]: source (type: RL_Sound)
Function 524: RL_IsSoundReady() (1 input parameters)
  Name: RL_IsSoundReady
  Return type: bool
  Description: Checks if a sound is ready
  Param[1]: sound (type: RL_Sound)
Function 525: RL_UpdateSound() (3 input parameters)
  Name: RL_UpdateSound
  Return type: void
  Description: Update sound buffer with new data
  Param[1]: sound (type: RL_Sound)
  Param[2]: data (type: const void *)
  Param[3]: sampleCount (type: int)
Function 526: RL_UnloadWave() (1 input parameters)
  Name: RL_UnloadWave
  Return type: void
  Description: Unload wave data
  Param[1]: wave (type: RL_Wave)
Function 527: RL_UnloadSound() (1 input parameters)
  Name: RL_UnloadSound
  Return type: void
  Description: Unload sound
  Param[1]: sound (type: RL_Sound)
Function 528: RL_UnloadSoundAlias() (1 input parameters)
  Name: RL_UnloadSoundAlias
  Return type: void
  Description: Unload a sound alias (does not deallocate sample data)
  Param[1]: alias (type: RL_Sound)
Function 529: RL_ExportWave() (2 input parameters)
  Name: RL_ExportWave
  Return type: bool
  Description: Export wave data to file, returns true on success
  Param[1]: wave (type: RL_Wave)
  Param[2]: fileName (type: const char *)
Function 530: RL_ExportWaveAsCode() (2 input parameters)
  Name: RL_ExportWaveAsCode
  Return type: bool
  Description: Export wave sample data to code (.h), returns true on success
  Param[1]: wave (type: RL_Wave)
  Param[2]: fileName (type: const char *)
Function 531: RL_PlaySound() (1 input parameters)
  Name: RL_PlaySound
  Return type: void
  Description: Play a sound
  Param[1]: sound (type: RL_Sound)
Function 532: RL_StopSound() (1 input parameters)
  Name: RL_StopSound
  Return type: void
  Description: Stop playing a sound
  Param[1]: sound (type: RL_Sound)
Function 533: RL_PauseSound() (1 input parameters)
  Name: RL_PauseSound
  Return type: void
  Description: Pause a sound
  Param[1]: sound (type: RL_Sound)
Function 534: RL_ResumeSound() (1 input parameters)
  Name: RL_ResumeSound
  Return type: void
  Description: Resume a paused sound
  Param[1]: sound (type: RL_Sound)
Function 535: RL_IsSoundPlaying() (1 input parameters)
  Name: RL_IsSoundPlaying
  Return type: bool
  Description: Check if a sound is currently playing
  Param[1]: sound (type: RL_Sound)
Function 536: RL_SetSoundVolume() (2 input parameters)
  Name: RL_SetSoundVolume
  Return type: void
  Description: Set volume for a sound (1.0 is max level)
  Param[1]: sound (type: RL_Sound)
  Param[2]: volume (type: float)
Function 537: RL_SetSoundPitch() (2 input parameters)
  Name: RL_SetSoundPitch
  Return type: void
  Description: Set pitch for a sound (1.0 is base level)
  Param[1]: sound (type: RL_Sound)
  Param[2]: pitch (type: float)
Function 538: RL_SetSoundPan() (2 input parameters)
  Name: RL_SetSoundPan
  Return type: void
  Description: Set pan for a sound (0.5 is center)
  Param[1]: sound (type: RL_Sound)
  Param[2]: pan (type: float)
Function 539: RL_WaveCopy() (1 input parameters)
  Name: RL_WaveCopy
  Return type: RL_Wave
  Description: Copy a wave to a new wave
  Param[1]: wave (type: RL_Wave)
Function 540: RL_WaveCrop() (3 input parameters)
  Name: RL_WaveCrop
  Return type: void
  Description: Crop a wave to defined frames range
  Param[1]: wave (type: RL_Wave *)
  Param[2]: initFrame (type: int)
  Param[3]: finalFrame (type: int)
Function 541: RL_WaveFormat() (4 input parameters)
  Name: RL_WaveFormat
  Return type: void
  Description: Convert wave data to desired format
  Param[1]: wave (type: RL_Wave *)
  Param[2]: sampleRate (type: int)
  Param[3]: sampleSize (type: int)
  Param[4]: channels (type: int)
Function 542: RL_LoadWaveSamples() (1 input parameters)
  Name: RL_LoadWaveSamples
  Return type: float *
  Description: Load samples data from wave as a 32bit float data array
  Param[1]: wave (type: RL_Wave)
Function 543: RL_UnloadWaveSamples() (1 input parameters)
  Name: RL_UnloadWaveSamples
  Return type: void
  Description: Unload samples data loaded with RL_LoadWaveSamples()
  Param[1]: samples (type: float *)
Function 544: RL_LoadMusicStream() (1 input parameters)
  Name: RL_LoadMusicStream
  Return type: RL_Music
  Description: Load music stream from file
  Param[1]: fileName (type: const char *)
Function 545: RL_LoadMusicStreamFromMemory() (3 input parameters)
  Name: RL_LoadMusicStreamFromMemory
  Return type: RL_Music
  Description: Load music stream from data
  Param[1]: fileType (type: const char *)
  Param[2]: data (type: const unsigned char *)
  Param[3]: dataSize (type: int)
Function 546: RL_IsMusicReady() (1 input parameters)
  Name: RL_IsMusicReady
  Return type: bool
  Description: Checks if a music stream is ready
  Param[1]: music (type: RL_Music)
Function 547: RL_UnloadMusicStream() (1 input parameters)
  Name: RL_UnloadMusicStream
  Return type: void
  Description: Unload music stream
  Param[1]: music (type: RL_Music)
Function 548: RL_PlayMusicStream() (1 input parameters)
  Name: RL_PlayMusicStream
  Return type: void
  Description: Start music playing
  Param[1]: music (type: RL_Music)
Function 549: RL_IsMusicStreamPlaying() (1 input parameters)
  Name: RL_IsMusicStreamPlaying
  Return type: bool
  Description: Check if music is playing
  Param[1]: music (type: RL_Music)
Function 550: RL_UpdateMusicStream() (1 input parameters)
  Name: RL_UpdateMusicStream
  Return type: void
  Description: Updates buffers for music streaming
  Param[1]: music (type: RL_Music)
Function 551: RL_StopMusicStream() (1 input parameters)
  Name: RL_StopMusicStream
  Return type: void
  Description: Stop music playing
  Param[1]: music (type: RL_Music)
Function 552: RL_PauseMusicStream() (1 input parameters)
  Name: RL_PauseMusicStream
  Return type: void
  Description: Pause music playing
  Param[1]: music (type: RL_Music)
Function 553: RL_ResumeMusicStream() (1 input parameters)
  Name: RL_ResumeMusicStream
  Return type: void
  Description: Resume playing paused music
  Param[1]: music (type: RL_Music)
Function 554: RL_SeekMusicStream() (2 input parameters)
  Name: RL_SeekMusicStream
  Return type: void
  Description: Seek music to a position (in seconds)
  Param[1]: music (type: RL_Music)
  Param[2]: position (type: float)
Function 555: RL_SetMusicVolume() (2 input parameters)
  Name: RL_SetMusicVolume
  Return type: void
  Description: Set volume for music (1.0 is max level)
  Param[1]: music (type: RL_Music)
  Param[2]: volume (type: float)
Function 556: RL_SetMusicPitch() (2 input parameters)
  Name: RL_SetMusicPitch
  Return type: void
  Description: Set pitch for a music (1.0 is base level)
  Param[1]: music (type: RL_Music)
  Param[2]: pitch (type: float)
Function 557: RL_SetMusicPan() (2 input parameters)
  Name: RL_SetMusicPan
  Return type: void
  Description: Set pan for a music (0.5 is center)
  Param[1]: music (type: RL_Music)
  Param[2]: pan (type: float)
Function 558: RL_GetMusicTimeLength() (1 input parameters)
  Name: RL_GetMusicTimeLength
  Return type: float
  Description: Get music time length (in seconds)
  Param[1]: music (type: RL_Music)
Function 559: RL_GetMusicTimePlayed() (1 input parameters)
  Name: RL_GetMusicTimePlayed
  Return type: float
  Description: Get current music time played (in seconds)
  Param[1]: music (type: RL_Music)
Function 560: RL_LoadAudioStream() (3 input parameters)
  Name: RL_LoadAudioStream
  Return type: RL_AudioStream
  Description: Load audio stream (to stream raw audio pcm data)
  Param[1]: sampleRate (type: unsigned int)
  Param[2]: sampleSize (type: unsigned int)
  Param[3]: channels (type: unsigned int)
Function 561: RL_IsAudioStreamReady() (1 input parameters)
  Name: RL_IsAudioStreamReady
  Return type: bool
  Description: Checks if an audio stream is ready
  Param[1]: stream (type: RL_AudioStream)
Function 562: RL_UnloadAudioStream() (1 input parameters)
  Name: RL_UnloadAudioStream
  Return type: void
  Description: Unload audio stream and free memory
  Param[1]: stream (type: RL_AudioStream)
Function 563: RL_UpdateAudioStream() (3 input parameters)
  Name: RL_UpdateAudioStream
  Return type: void
  Description: Update audio stream buffers with data
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: data (type: const void *)
  Param[3]: frameCount (type: int)
Function 564: RL_IsAudioStreamProcessed() (1 input parameters)
  Name: RL_IsAudioStreamProcessed
  Return type: bool
  Description: Check if any audio stream buffers requires refill
  Param[1]: stream (type: RL_AudioStream)
Function 565: RL_PlayAudioStream() (1 input parameters)
  Name: RL_PlayAudioStream
  Return type: void
  Description: Play audio stream
  Param[1]: stream (type: RL_AudioStream)
Function 566: RL_PauseAudioStream() (1 input parameters)
  Name: RL_PauseAudioStream
  Return type: void
  Description: Pause audio stream
  Param[1]: stream (type: RL_AudioStream)
Function 567: RL_ResumeAudioStream() (1 input parameters)
  Name: RL_ResumeAudioStream
  Return type: void
  Description: Resume audio stream
  Param[1]: stream (type: RL_AudioStream)
Function 568: RL_IsAudioStreamPlaying() (1 input parameters)
  Name: RL_IsAudioStreamPlaying
  Return type: bool
  Description: Check if audio stream is playing
  Param[1]: stream (type: RL_AudioStream)
Function 569: RL_StopAudioStream() (1 input parameters)
  Name: RL_StopAudioStream
  Return type: void
  Description: Stop audio stream
  Param[1]: stream (type: RL_AudioStream)
Function 570: RL_SetAudioStreamVolume() (2 input parameters)
  Name: RL_SetAudioStreamVolume
  Return type: void
  Description: Set volume for audio stream (1.0 is max level)
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: volume (type: float)
Function 571: RL_SetAudioStreamPitch() (2 input parameters)
  Name: RL_SetAudioStreamPitch
  Return type: void
  Description: Set pitch for audio stream (1.0 is base level)
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: pitch (type: float)
Function 572: RL_SetAudioStreamPan() (2 input parameters)
  Name: RL_SetAudioStreamPan
  Return type: void
  Description: Set pan for audio stream (0.5 is centered)
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: pan (type: float)
Function 573: RL_SetAudioStreamBufferSizeDefault() (1 input parameters)
  Name: RL_SetAudioStreamBufferSizeDefault
  Return type: void
  Description: Default size for new audio streams
  Param[1]: size (type: int)
Function 574: RL_SetAudioStreamCallback() (2 input parameters)
  Name: RL_SetAudioStreamCallback
  Return type: void
  Description: Audio thread callback to request new data
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: callback (type: AudioCallback)
Function 575: RL_AttachAudioStreamProcessor() (2 input parameters)
  Name: RL_AttachAudioStreamProcessor
  Return type: void
  Description: Attach audio stream processor to stream, receives the samples as 'float'
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: processor (type: AudioCallback)
Function 576: RL_DetachAudioStreamProcessor() (2 input parameters)
  Name: RL_DetachAudioStreamProcessor
  Return type: void
  Description: Detach audio stream processor from stream
  Param[1]: stream (type: RL_AudioStream)
  Param[2]: processor (type: AudioCallback)
Function 577: RL_AttachAudioMixedProcessor() (1 input parameters)
  Name: RL_AttachAudioMixedProcessor
  Return type: void
  Description: Attach audio stream processor to the entire audio pipeline, receives the samples as 'float'
  Param[1]: processor (type: AudioCallback)
Function 578: RL_DetachAudioMixedProcessor() (1 input parameters)
  Name: RL_DetachAudioMixedProcessor
  Return type: void
  Description: Detach audio stream processor from the entire audio pipeline
  Param[1]: processor (type: AudioCallback)
