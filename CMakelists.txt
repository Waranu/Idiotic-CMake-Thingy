cmake_minimum_required(VERSION 3.22)
include(FetchContent)

project(game VERSION 1.0.0 LANGUAGES C CXX)
set(CMAKE_C_STANDARD 23)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CURRENT_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/build)

# Define options for libraries (these will be cache variables)
set(SDL2 OFF CACHE BOOL "Enable SDL2")
set(IMGUI OFF CACHE BOOL "Enable Imgui")
set(BOX2D OFF CACHE BOOL "Enable Box2d")
set(CIMGUI OFF CACHE BOOL "Enable Cimgui")
set(RAYLIB OFF CACHE BOOL "Enable Raylib")
set(PREFIXED_RAYLIB OFF CACHE BOOL "Enable Prefixed Raylib")
set(RAYLIB_CPP OFF CACHE BOOL "Enable Raylib-cpp")
set(SOKOL OFF CACHE BOOL "Enable Sokol")
set(NUKLEAR OFF CACHE BOOL "Enable Nuklear")
set(GLAD OFF CACHE BOOL "Enable GLAD")
set(GLFW OFF CACHE BOOL "Enable GLFW")
set(ENET OFF CACHE BOOL "Enable ENET")

file(GLOB_RECURSE SRC "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
add_executable(game ${SRC})
target_compile_options(game PRIVATE -Wextra -Wno-ignored-pragmas -Wmissing-field-initializers -std=gnu++23)
set(Linking_libs)

# Library-specific configuration
if(SDL2)
    message(STATUS "Including library: SDL")
    set(SDL2_BUILD_DIR ${CMAKE_SOURCE_DIR}/deps/SDL/build)

    file(MAKE_DIRECTORY ${SDL2_BUILD_DIR})
    set(SDL_HAPTIC OFF CACHE BOOL "Disable SDL Haptic support" FORCE)
    set(SDL_SHARED OFF CACHE BOOL "Disable building SDL shared library" FORCE)
    set(SDL_STATIC ON CACHE BOOL "Enable building SDL static library" FORCE)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/deps/SDL ${SDL2_BUILD_DIR})
    add_definitions(-DSDL2_STATIC) # Uncomment -DHAVE_STRINGS_H=0 if needed
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
    list(APPEND Linking_libs SDL2::SDL2main SDL2::SDL2-static)
endif()

if(BOX2D)
    message(STATUS "Including library: BOX2D")
    setup_library(box2d https://github.com/erincatto/box2d.git main)
    target_link_libraries(game PRIVATE box2d)
endif()

if(PREFIXED_RAYLIB)
    message(STATUS "Including library: Raylib")
    set(raylib_build_dir ${CMAKE_CURRENT_SOURCE_DIR}/vendor/prefixed-raylib/build)
    file(MAKE_DIRECTORY ${raylib_build_dir})
    set(CMAKE_BUILD_TYPE Debug)
    set(BUILD_SHARED_LIBS OFF CACHE BOOL "Enable building Prefixed-Raylib static library" FORCE)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/vendor/prefixed-raylib ${raylib_build_dir})
    target_link_libraries(game PRIVATE raylib)
endif()

if(RAYLIB)
    message(STATUS "Including library: Raylib")
    set(raylib_build_dir ${CMAKE_CURRENT_SOURCE_DIR}/deps/raylib/build)
    file(MAKE_DIRECTORY ${raylib_build_dir})
    set(CMAKE_BUILD_TYPE Debug)
    set(BUILD_SHARED_LIBS OFF CACHE BOOL "Enable building Raylib-cpp static library" FORCE)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/deps/raylib ${raylib_build_dir})
    target_link_libraries(game PRIVATE raylib)
endif()

if(RAYLIB_CPP)
    message(STATUS "Including library: Raylib-cpp")

    if(RAYLIB)
        set(raylib_cpp_build_dir ${CMAKE_CURRENT_SOURCE_DIR}/deps/raylib-cpp/build)
        file(MAKE_DIRECTORY ${raylib_cpp_build_dir})
        set(BUILD_RAYLIB_CPP_STATIC ON CACHE BOOL "Enable building Raylib-cpp static library" FORCE)
        target_include_directories(game PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/deps/raylib-cpp/include)
        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/deps/raylib-cpp ${raylib_cpp_build_dir})
        target_link_libraries(game PUBLIC raylib_cpp)

    else()
        message(STATUS "Error: RAYLIB Flag is not set.")
    endif()
endif()

if(CIMGUI)
    message(STATUS "Including library: CIMGUI")
    set(cimgui_path ${CMAKE_CURRENT_SOURCE_DIR}/deps/cimgui)
    set(cimgui_imgui_backend_path ${cimgui_path}/imgui/backends)
    set(cimgui_imgui_table_source ${cimgui_path}/imgui/imgui_tables.cpp)

    include_directories(${cimgui_path}/imgui)
    include_directories(${cimgui_path})
    include_directories(${cimgui_path}/generator/output/)

    add_definitions("-DIMGUI_USER_CONFIG=\"../cimconfig.h\"")
    add_definitions("-DIMGUI_DISABLE_OBSOLETE_FUNCTIONS=1")

    if(WIN32)
        add_definitions("-DIMGUI_IMPL_API=extern \"C\" __declspec\(dllexport\)")
    else()
        add_definitions("-DIMGUI_IMPL_API=extern \"C\"")
    endif()

    add_compile_definitions("IMGUI_IMPL_OPENGL_LOADER_GL3W")

    set(cimgui_sources
        ${cimgui_path}/cimgui.cpp
        ${cimgui_path}/imgui/imgui.cpp
        ${cimgui_path}/imgui/imgui_draw.cpp
        ${cimgui_path}/imgui/imgui_demo.cpp
        ${cimgui_path}/imgui/imgui_widgets.cpp
        ${cimgui_imgui_table_source}
    )

    set(cimgui_libraries)

    if(WIN32)
        list(APPEND cimgui_libraries opengl32)
    else()
        list(APPEND cimgui_libraries GL)
    endif()

    # Create static library for ImGui
    if(SDL AND NOT SOKOL)
        list(APPEND cimgui_sources
            ${cimgui_imgui_backend_path}/imgui_impl_sdl2.cpp)
        list(APPEND cimgui_sources
            ${cimgui_imgui_backend_path}/imgui_impl_opengl3.cpp)
        add_compile_definitions(-DCIMGUI_USE_OPENGL3 -DCIMGUI_USE_SDL2)
    endif()

    add_library(cimgui STATIC ${cimgui_sources})

    if(SDL AND NOT SOKOL)
        target_link_libraries(cimgui ${cimgui_libraries} SDL2::SDL2-static)
    else()
        target_link_libraries(cimgui ${cimgui_libraries})
    endif()

    if(MINGW)
        add_link_options("-mconsole")
    endif()
endif()

if(IMGUI)
    message(STATUS "Including library: IMGUI")
    set(imgui_path ${CMAKE_CURRENT_SOURCE_DIR}/vendor/imgui)
    set(imgui_backend_path ${imgui_path}/backends)
    set(imgui_table_src ${imgui_path}/imgui_tables.cpp)
    set(imgui_sources
        ${imgui_path}/imgui.cpp
        ${imgui_path}/imgui_draw.cpp
        ${imgui_path}/imgui_demo.cpp
        ${imgui_path}/imgui_widgets.cpp
        ${imgui_table_src}
    )

    if(SDL2 AND NOT SOKOL)
        list(APPEND imgui_sources
            ${imgui_backend_path}/imgui_impl_sdl2.cpp
            ${imgui_backend_path}/imgui_impl_opengl3.cpp)
        add_compile_definitions(-DSDL_MAIN_HANDLED)
    endif()

    if(PREFIXED_RAYLIB)
        list(APPEND imgui_sources ${imgui_backend_path}/rlImGui.cpp)
    endif()

    add_library(imgui STATIC)
    target_include_directories(imgui PUBLIC ${imgui_path}/)
    target_include_directories(imgui PUBLIC ${imgui_backend_path}/)
    target_sources(imgui PRIVATE ${imgui_sources})

    if(SDL AND NOT SOKOL)
        target_include_directories(imgui PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/vendor/SDL/include)
        target_link_libraries(imgui PRIVATE SDL2::SDL2-static opengl32)
    elseif(PREFIXED_RAYLIB)
        target_link_libraries(imgui PRIVATE raylib)
    else()
    endif()

    target_link_libraries(game PRIVATE imgui opengl32)
endif()

if(SOKOL)
    message(STATUS "Including library: SOKOL")
    set(sokol ${CMAKE_CURRENT_SOURCE_DIR}/deps/sokol)
    include_directories(${sokol}/${sokol}/util/)
    add_compile_definitions(-DSOKOL_IMPL)
endif()

if(NUKLEAR)
    message(STATUS "Including library: NUKLEAR")
    add_library(nuklear_static STATIC)
    set(nuklear_path ${CMAKE_CURRENT_SOURCE_DIR}/vendor/Nuklear)
    target_include_directories(nuklear_static PUBLIC ${nuklear_path}/)
    target_sources(nuklear_static PRIVATE ${nuklear_path}/nuklear.c)
    target_link_libraries(game PRIVATE nuklear_static)

    if(((SDL2 OR SDL3) AND GLAD) AND NOT SOKOL)
        target_include_directories(game PUBLIC
            ${CMAKE_CURRENT_SOURCE_DIR}/vendor/Nuklear/demo/sdl_opengl3/
        )
        target_link_libraries(game PRIVATE opengl32)
    elseif((SDL2 OR SDL3) AND NOT GLAD AND NOT SOKOL)
        target_include_directories(game PUBLIC
            ${CMAKE_CURRENT_SOURCE_DIR}/vendor/Nuklear/demo/sdl_renderer/
        )
    elseif(PREFIXED_RAYLIB)
        target_include_directories(game PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/vendor/Nuklear/demo/raylib)
    endif()
endif()

if(GLAD)
    add_library(glad_static STATIC)
    target_include_directories(glad_static PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/deps/glad/include/)
    target_sources(glad_static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/deps/glad/src/glad.c)
    target_link_libraries(game PRIVATE glad_static)

    if(WIN32)
        target_link_libraries(game PRIVATE opengl32 gdi32)
    endif()
endif()

if(GLFW)
    set(glfw_build_dir ${CMAKE_CURRENT_SOURCE_DIR}/deps/glfw/build)
    file(MAKE_DIRECTORY ${glfw_build_dir})
    set(GLFW_LIBRARY_TYPE STATIC CACHE STRING "Library type override for GLFW (STATIC, SHARED, OBJECT, or empty to follow BUILD_SHARED_LIBS)" FORCE)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/deps/glfw ${glfw_build_dir})
    target_include_directories(game PRIVATE ${CMAKE_SOURCE_DIR}/deps/glfw/include/GLFW/)
    target_link_libraries(game PRIVATE glfw)

    if(WIN32)
        target_link_libraries(game PRIVATE opengl32 gdi32)
    endif()
endif()

if(ENET)
    set(enet_build_dir ${CMAKE_CURRENT_SOURCE_DIR}/deps/enet/build)
    file(MAKE_DIRECTORY ${enet_build_dir})
    set(ENET_STATIC ON CACHE BOOL "Enable building Raylib-cpp static library" FORCE)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/deps/enet ${enet_build_dir})
    target_link_libraries(game PRIVATE enet_static)
endif()

# Game source files
target_link_libraries(game PRIVATE ${Linking_libs})
